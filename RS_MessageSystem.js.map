{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BaseComponent.ts","webpack:///./src/index.ts","webpack:///./src/RS.ts","webpack:///./src/DependencyInjector.ts","webpack:///./src/BalloonWindowTransformComponent.ts","webpack:///./src/Component.ts","webpack:///./src/EventEmitter.ts","webpack:///./src/NameWindowPositionComponent.ts","webpack:///./src/ComponentExecutor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseComponent","Component","props","super","console","log","this","_messageWindow","messageWindow","error","contents","_nameBoxWindow","Error","_choiceListWindow","windowWidth","windowHeight","save","restore","updatePadding","padding","itemPadding","newLineX","numLines","fittingHeight","text","textSizeEx","width","lineHeight","drawMessageFace","x","y","height","getInstance","add","alias_Bitmap_initialize","Bitmap","initialize","fontBold","fontGradient","highlightTextColor","setGradient","color1","color2","color3","tx","ty","context","_context","tWidth","measureTextWidth","gradient","createLinearGradient","addColorStop","_baseTexture","update","setGradientStyle","RS","MessageSystem","Params","grd","style","gradientStyle","contains","ws","hs","createRadialGradient","_makeFontNameText","fontItalic","fontSize","fontFace","_drawTextBody","maxWidth","imageSmoothingEnabled","fontSmoothingEnabled","gradientColor1","gradientColor2","gradientColor3","fillStyle","textColor","fillText","alias_Game_Message_clear","Game_Message","clear","_waitTime","_gradientText","_balloon","_align","_balloonPatternHeight","_lastAlign","setWaitTime","time","setGradientText","getWaitTime","getGradientText","getMaxLine","_maxLine","setMaxLine","maxLine","numVisibleRows","setBalloon","getBalloon","setAlign","push","getAlign","last","shift","undefined","clearAlignLast","setBalloonPatternHeight","getBalloonPatternHeight","Sprite_Battler","screenX","screenY","MessageDesc","outlineColor","outlineWidth","textSpeed","_isSaved","$gameMessage","Window_Base","obtainEscapeCode","textState","arr","Reg","defaultEscapeCode","exec","slice","index","length","toUpperCase","obtainNameColor","Color","gmColor","ColorManager","changeTextColor","color","parseInt","alias_Window_Base_processEscapeCharacter","processEscapeCharacter","code","tcGroup","TextCodes","ENUM","textCode","Main","obtainEscapeParam","COLOR","ICON","processDrawIcon","INCREASE","makeFontBigger","DECREASE","makeFontSmaller","alias_loadWindowskin","loadWindowskin","windowskin","addLoadListener","baseColor","getFontFace","langCode","navigator","language","fonts","default","drawTextEx","resetFontSettings","createTextState","processAllText","outputWidth","minFontSize","defaultOutlineWidth","defaultOutlineColor","resetTextColor","maxFontSize","_messageDesc","alias_Window_Base_convertEscapeCharacters","convertEscapeCharacters","regGroup","Group","replace","VAR","args","$gameVariables","toString","PLAYER","actorName","PARTY_MEMBER","partyMemberName","NUM","toComma","GOLD","TextManager","currencyUnit","CLASSES","$dataClasses","ITEM","$dataItems","WEAPON","$dataWeapons","ARMOR","$dataArmors","ENEMY","$dataEnemies","STATE","$dataStates","SKILL","$dataSkills","ALIGN_LEFT","ALIGN","ALIGN_CENTER","ALIGN_RIGHT","_isUsedTextWidthEx","Number","ALIGN_CLEAR","source","textPadding","processAlign","_textState","rtl","setAlignLeft","setAlignCenter","setAlignRight","alias_Window_Base_processNewLine_align","processNewLine","startX","contentsWidth","Window_Message","obtainTextSpeed","obtainGradientText","String","obtainSoundName","alias_Window_Message_processEscapeCharacter","TEXT_SPEED","TEXT_SIZE","setTextSize","OUTLINE_COLOR","setStrokeColor","INDENT","setTextIndent","OUTLINE_WIDTH","setStrokeWidth","BOLD","setTextBold","BOLD_START","BOLD_END","ITALIC","setTextItalic","ITALIC_START","ITALIC_END","GRADIENT","setTextGradient","HIGHLIGHT_TEXT_COLOR","setHighlightTextColor","TAB","textWidth","TabSize","CARRIAGE_RETURN","startWait","PLAY_SE","playSe","SHOW_PICTURE","showPicture","HIDE_PICTURE","erasePicture","FACE","split","clamp","seName","data","trim","pan","pitch","volume","ConfigManager","seVolume","AudioManager","param","raw","map","e","params","ret","forEach","a","$gameScreen","apply","picId","_pauseSignSprite","move","_width","_height","scale","resetGradient","alias_Window_Message_createTextState","px","py","assign","processWordWrap","w","isValid","Math","floor","needsNewPage","startPause","alias_Window_Message_processNewLinePW","_backBuffer","isDirty","processCharacter","charCodeAt","flushTextState","processControlCharacter","buffer","alias_Window_Message_processCharacter","preLen","substr","processNormalCharacterProxy","isNormalMessageWindow","isRealDrawingMode","drawing","isParagraphMinifier","faceName","ImageManager","faceWidth","faceDirection","contentW","contentH","fillAll","alias_Window_Message_flushTextState","isDrawing","isSlowTextMode","_showFast","isEndOfText","isDrawingTextBackground","backBuffer","bitmap","min","innerWidth","innerHeight","flushTextBackgbround","updateBigFaceOpacity","_faceContents","faceOpacity","opacity","fadeInOutFaceContents","isOpening","isClosing","openness","alias_Window_Message_checkToNotClose","checkToNotClose","updateBalloonPosition","component","DependencyInjector","getComponent","getDefaultSizeOption","isMobileDevice","Utils","maxSW","window","outerWidth","screen","availWidth","maxSH","outerHeight","availHeight","maxHeight","maxY","maxX","updatePlacement","goldWindow","_goldWindow","isNormalWindowMode","isValidSceneIsMap","SceneManager","_scene","Scene_Map","_positionType","positionType","desiredX","Graphics","windowOffset","desiredY","minGoldY","updateDefaultOpacity","updateContentsOpacity","isBigFace","backIndex","faceSide","setFaceZIndex","isAlreadyDrawnFace","zIndex","parent","isFaceSide","setChildIndex","clearFaceBitmap","alias_Window_Message_convertEscapeCharacters","BOLD_START_CV","BOLD_END_CV","ITALIC_START_CV","ITALIC_END_CV","NAME","retName","endsWith","namePositionTypeAtX","setName","BALLOON","arguments","$gameParty","inBattle","abs","FRIENDLY_TROOPS","ENEMY_TROOPS","FACE_DIRECTION","setHeight","createContents","alias_Window_Message_initialize","rect","$gameTemp","setMSHeightFunc","createFaceContents","on","removeEventHandler","onLoadWindowskin","calcBalloonRect","alias_Window_Message_newPage","newPage","emit","openBalloon","updateBalloonPositionInBattle","sign","setupOwner","Scene_Battle","resizeMessageSystem","startMessage","allText","tempText","updateBackground","open","start","getDefaultWindowRect","Scene_Message","messageWindowRect","isResetOwner","ox","oy","windowRect","$gameMap","setMsgOwner","$gamePlayer","off","isReady","getPixel","loadSystem","_isDirtyWindowskin","setTimeout","_Window_Message_updateLoading","updateLoading","contentsHeight","Sprite","addChildAt","removeFaceContents","removeChild","faceIndex","faceStartX","textStartX","faceStartOriginX","isValidBigFace","updateNameWindow","standardBackOpacity","backOpacity","translucentOpacity","defaultOpacity","contentsOpacity","getSpriteActors","members","max","type","id","getSpriteEnemies","$gameTroop","getMsgEvent","test","RegExp","$1","event","alias_Window_Message_shouldBreakHere","shouldBreakHere","isBreakCharacter","isPlayTextSound","interval","textSoundInterval","_textSoundInterval","playStaticSe","popParameter","Game_Interpreter","processMessageParams","eventId","meta","getEventComments","windowskinForNameWindow","faceOX","faceOY","Boolean","isValidMultiLine","codes","prevCode","lineCount","currentCommand","_list","_index","choiceWindowStyle","command101","isBusy","setMsgEvent","character","_eventId","setFaceImage","setBackground","setPositionType","setSpeakerName","isMultiLine","multiLineAddMessage","nextEventCode","parameters","setupChoices","setupNumInput","setupItemChoice","setWaitMode","initLineHeight","_texts","addLineHeight","_lineHeight","Window_NameBox","isRTL","Game_Temp","func","_callMSHeightFunc","alias_Game_Map_initialize","Game_Map","_msgOwner","_msgEvent","getMsgOwner","tileHeight","ev","alias_Scene_Message_associateWindows__enrtyPoint","associateWindows","injectMessageWindow","ready","ww","wh","calcWindowHeight","wx","Rectangle","alias_Scene_Message_terminate","terminate","ejectMessageWindow","initSystem","DEBUG","nw","Window","showDevTools","moveTo","executeAll","pluginParams","$plugins","filter","description","pluginName","MessageParams","jsonParse","str","JSON","parse","k","v","keys","lastUsed","pop","Default","Korean","Chinese","English","Japanese","FACE_START_ORIGIN_X","nameWindowWidth","NAME_WINDOW_WIDTH","nameWindowRows","NAME_WINDOW_ROWS","FONT_SIZE","STD_PADDING","isValidShakingChoice","nameWindowX","nameWindowY","nameWindowStdPadding","WIDTH","HEIGHT","isTempSpriteContainerVisibility","Point","customFont","customFontName","customFontSrc","defaultChoicePostion","exTextColors","pathTextSound","textSoundEval1","textSoundEval2","textSoundPoolSize","preloadWindowskins","systemFonts","settings","languageCode","fontName","alias_Game_Temp_initialize","eval","boxWidth","KoreanEscapeCode","ChineseEscapeCode","EnglishEscapeCode","JapaneseEscapeCode","rowData","retData","concat","WAIT_SEC_15","WAIT_SEC_60","START_PAUSE","LINE_SHOW_FAST_LT","LINE_SHOW_FAST_GT","PAUSE_SKIP","getTextCode","idx","match","note","list","commonEvent","reservedCommonEvent","re","join","getColor","getBaseColor","getUserCustomColor","obj","g","b","parseFloat","KOREAN_COLORS","청록","청록색","c_aqua","검은색","검정","c_black","파란색","파랑","c_blue","짙은회색","c_dkgray","자홍색","자홍","c_fuchsia","회색","c_gray","녹색","c_green","밝은녹색","라임","c_lime","밝은회색","c_ltgray","밤색","마룬","c_maroon","감청색","네이비","c_navy","황록색","올리브","c_olive","주황색","주황","오렌지","c_orange","보라색","보라","c_purple","빨간색","빨강","c_red","은색","은","c_silver","민트색","c_teal","흰색","흰","c_white","노란색","노랑","c_yellow","CHINESE_COLOR","水色","黑色","蓝色","深灰色","紫红色","灰色","绿色","浅绿色","浅灰色","栗色","绀青色","黄绿色","橙黄色","紫色","红色","银白色","水鸭色","白色","黄色","ENGLISH_COLOR","AQUA","BLACK","BLUE","DKGRAY","FUCHSIA","GRAY","GREEN","LIME","LTGRAY","MAROON","NAVY","OLIVE","ORANGE","PURPLE","RED","SILVER","TEAL","WHITE","YELLOW","JAPANESE_COLOR","アクア色","靑色","ふか灰色","紫紅色","綠色","黃綠","鼠色","群青色","ネイビー","黃綠色","オリーブ色","橙色","オレンジ色","赤色","レッド","銀色","ミント色","薄荷色","黃色","getKoreanColor","getChineseColor","getEnglishColor","getJapaneseColor","getBrowser","tem","ua","userAgent","M","version","appName","appVersion","splice","inject","_isDirty","COMPONENTS","BalloonWindowTransformComponent","NameWindowPositionComponent","getComponentClass","_components","_bWidth","_bHeight","onReady","standardPadding","dx","dy","bw","bh","boxHeight","stringify","mx","canvasToLocalX","my","scaleY","ny","_nameWindow","isActiveInBalloon","owner","warn","getNameWindowY","setBalloonPlacement","setBalloonRect","updateSubBalloonElements","$gameSystem","isSideView","scene","_spriteset","_actorSprites","_enemySprites","tempBattlers","target","_actor","isAlive","_enemy","padY","_mainSprite","transform","updateTransform","tempFontSize","calcTextHeight","EventEmitter","init","mounted","onDestroy","_listeners","eventName","Function","isNaN","position","nx","newX","setOpacity","ballonOwnerType","updatePositionX","topY","isOpen","ComponentExecutor","INSTANCE","startChar","endChar","len","fromCharCode","random","callbackFunction","active","currentCallback"],"mappings":"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","file":"RS_MessageSystem.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { Component, ComponentProp } from \"./Component\";\n\n/**\n * @class BaseComponent\n * @description\n * 샌드박스 환경에서 MV 메소드를 호출하여 이전 버전에 대한 안전성을 제공합니다.\n */\nexport class BaseComponent extends Component {\n    private _messageWindow!: Window_Message;\n\n    constructor(props: ComponentProp) {\n        super(props);\n    }\n\n    onReady(props: ComponentProp) {\n        // if the message window is valid from passed props.\n        if (!(\"messageWindow\" in props)) {\n            console.error(\"messageWindow is not defined\");\n            return;\n        }\n\n        console.log(\"On Ready 이벤트가 실행되었습니다.\");\n\n        /**\n         * @type {Window_Message}\n         */\n        this._messageWindow = props.messageWindow;\n    }\n\n    // Getters\n    get messageWindow() {\n        return this._messageWindow;\n    }\n\n    get contents() {\n        return this._messageWindow.contents;\n    }\n\n    /**\n     * @returns {Window_NameBox}\n     */\n    get _nameWindow(): never | Window_NameBox {\n        const isNameWindowOK = this._messageWindow._nameBoxWindow;\n        if (!isNameWindowOK) {\n            throw new Error(\n                \"이름 윈도우가 아직 정의되지 않았습니다. DI를 제대로된 시점에 하시기 바랍니다.\"\n            );\n        }\n\n        return this._messageWindow._nameBoxWindow;\n    }\n\n    get _choiceWindow() {\n        return this._messageWindow._choiceListWindow\n            ? this._messageWindow._choiceListWindow\n            : {\n                  windowWidth: () => 0,\n                  windowHeight: () => 0,\n              };\n    }\n\n    save(): void {\n        this._messageWindow.save();\n    }\n\n    restore(): void {\n        this._messageWindow.restore();\n    }\n\n    standardPadding() {\n        // 패딩을 업데이트해야 합니다 (MZ에서 달라진 부분입니다)\n        // 꼭 체크할 필요는 없지만...\n        this._messageWindow.updatePadding();\n        const padding = this._messageWindow.padding || 12;\n\n        return padding;\n    }\n\n    textPadding() {\n        // textPadding()의 구현입니다.\n        return this._messageWindow.itemPadding() || 6;\n    }\n\n    newLineX() {\n        return this._messageWindow.newLineX();\n    }\n\n    fittingHeight(numLines: number) {\n        return this._messageWindow.fittingHeight(numLines);\n    }\n\n    drawTextEx(text: string) {\n        const box = this._messageWindow.textSizeEx(text);\n        return box.width;\n    }\n\n    lineHeight() {\n        return this._messageWindow.lineHeight();\n    }\n\n    /**\n     * TODO: 상속 시, 이 메소드를 오버라이드 하세요.\n     */\n    updatePlacement() {}\n\n    drawMessageFace() {\n        this._messageWindow.drawMessageFace();\n    }\n\n    set x(value: number) {\n        this._messageWindow.x = value;\n    }\n\n    set y(value: number) {\n        this._messageWindow.y = value;\n    }\n\n    set width(value: number) {\n        this._messageWindow.width = value;\n    }\n\n    set height(value: number) {\n        this._messageWindow.height = value;\n    }\n\n    get width() {\n        return this._messageWindow.width;\n    }\n\n    get _width() {\n        return this._messageWindow.width;\n    }\n\n    get height() {\n        return this._messageWindow.height;\n    }\n\n    get _height() {\n        return this._messageWindow.height;\n    }\n\n    canvasToLocalX(x: number) {\n        return x;\n    }\n\n    canvasToLocalY(y: number) {\n        return y;\n    }\n}\n","/// <reference types=\"../types/my-types\" />\n/// <reference types=\"../types/lunalite-pixi-mz\" />\nimport { Color } from \"./RS\";\nimport { DependencyInjector } from \"./DependencyInjector\";\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\nimport ComponentExecutor from \"./ComponentExecutor\";\n\nconst executor = ComponentExecutor.getInstance();\n\nexecutor\n    /**\n     * ? Bitmap\n     * @description 텍스트에 그라데이션을 채우는 기능을 추가합니다.\n     */\n    .add(\"bitmap\", () => {\n        const alias_Bitmap_initialize = Bitmap.prototype.initialize;\n        Bitmap.prototype.initialize = function (width: number, height: number) {\n            alias_Bitmap_initialize.call(this, width, height);\n            this.fontBold = false;\n            this.fontGradient = false;\n            this.highlightTextColor = null;\n        };\n\n        Bitmap.prototype.setGradient = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const tWidth = this.measureTextWidth(text);\n            context.save();\n            const gradient = context.createLinearGradient(\n                tx,\n                0,\n                tx + tWidth,\n                0\n            );\n            gradient.addColorStop(0, color1);\n            gradient.addColorStop(0.6, color2);\n            gradient.addColorStop(1, color3);\n            context.restore();\n\n            this._baseTexture.update();\n\n            return gradient;\n        };\n\n        Bitmap.prototype.setGradientStyle = function (\n            text,\n            color1,\n            color2,\n            color3,\n            tx,\n            ty\n        ) {\n            const context = this._context;\n            const width = this.measureTextWidth(text);\n            const height = RS.MessageSystem.Params.lineHeight;\n            let grd;\n\n            context.save();\n\n            const style = RS.MessageSystem.Params.gradientStyle;\n\n            if (style !== \"radial\") {\n                if (style.contains(\"horizontal\")) {\n                    grd = context.createLinearGradient(tx, 0, tx + width, 0);\n                } else {\n                    grd = context.createLinearGradient(tx, 0, 0, ty + height);\n                }\n            } else {\n                const ws = width * 0.5;\n                const hs = height * 0.5;\n                grd = context.createRadialGradient(ws, hs, 0.0, ws, hs, ws);\n            }\n\n            if (style === \"radial\") {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            } else if (style.contains(\"axial\")) {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(0.5, color2);\n                grd.addColorStop(1.0, color3);\n            } else {\n                grd.addColorStop(0.0, color1);\n                grd.addColorStop(1.0, color2);\n            }\n\n            context.restore();\n\n            this._baseTexture.update();\n\n            return grd;\n        };\n\n        Bitmap.prototype._makeFontNameText = function () {\n            return (\n                (this.fontItalic ? \"Italic \" : \"\") +\n                (this.fontBold ? \"bold \" : \"\") +\n                this.fontSize +\n                \"px \" +\n                this.fontFace\n            );\n        };\n\n        Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {\n            const context = this._context;\n            context.save(); // 드로잉 상태 저장\n            context.imageSmoothingEnabled =\n                RS.MessageSystem.Params.fontSmoothingEnabled;\n\n            if (this.fontGradient) {\n                var gradient = this.setGradientStyle(\n                    text,\n                    RS.MessageSystem.Params.gradientColor1,\n                    RS.MessageSystem.Params.gradientColor2,\n                    RS.MessageSystem.Params.gradientColor3,\n                    tx,\n                    ty\n                );\n                context.fillStyle = gradient;\n            } else {\n                context.fillStyle = this.textColor;\n            }\n            context.fillText(text, tx, ty, maxWidth);\n            context.fillStyle = this.textColor;\n            context.restore();\n        };\n    })\n    /**\n     * ? Main\n     * @description\n     * 메인 엔트리 포인트입니다.\n     */\n    .add(\"main\", () => {\n        //============================================================================\n        // Game_Message\n        //============================================================================\n        const alias_Game_Message_clear = Game_Message.prototype.clear;\n        Game_Message.prototype.clear = function () {\n            alias_Game_Message_clear.call(this);\n            this._waitTime = 0;\n            this._gradientText = \"\";\n            this._balloon = -2;\n            this._align = [];\n            this._balloonPatternHeight = 0;\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setWaitTime = function (time) {\n            this._waitTime = time;\n        };\n\n        Game_Message.prototype.setGradientText = function (text) {\n            this._gradientText = text;\n        };\n\n        Game_Message.prototype.getWaitTime = function () {\n            return this._waitTime || 0;\n        };\n\n        Game_Message.prototype.getGradientText = function () {\n            return this._gradientText;\n        };\n\n        Game_Message.prototype.getMaxLine = function () {\n            return this._maxLine;\n        };\n\n        Game_Message.prototype.setMaxLine = function (maxLine) {\n            this._maxLine = maxLine;\n            RS.MessageSystem.Params.numVisibleRows = maxLine;\n        };\n\n        Game_Message.prototype.setBalloon = function (n) {\n            this._balloon = n;\n        };\n\n        Game_Message.prototype.getBalloon = function (n) {\n            return this._balloon;\n        };\n\n        Game_Message.prototype.setAlign = function (n) {\n            this._align = this._align || [];\n            this._lastAlign = n; // 마지막 정렬 위치 기억\n            this._align.push(n);\n        };\n\n        Game_Message.prototype.getAlign = function (n) {\n            const last = this._align.shift();\n            if (last === undefined) {\n                return this._lastAlign;\n            }\n            return last;\n        };\n\n        Game_Message.prototype.clearAlignLast = function (n) {\n            this._lastAlign = -1;\n        };\n\n        Game_Message.prototype.setBalloonPatternHeight = function (\n            value: number\n        ) {\n            this._balloonPatternHeight = value;\n        };\n\n        Game_Message.prototype.getBalloonPatternHeight = function () {\n            return this._balloonPatternHeight;\n        };\n\n        //============================================================================\n        // Sprite_Battler\n        //============================================================================\n\n        Sprite_Battler.prototype.screenX = function () {\n            return this.x || 0;\n        };\n\n        Sprite_Battler.prototype.screenY = function () {\n            return this.y || 0;\n        };\n\n        //============================================================================\n        // MessageDesc\n        //============================================================================\n\n        class MessageDesc {\n            public fontFace: string;\n            public fontSize: number;\n            public fontBold: boolean;\n            public fontItalic: boolean;\n            public textColor: string;\n            public outlineColor: string;\n            public outlineWidth: number;\n            public fontGradient: boolean;\n            public highlightTextColor: string | null;\n            public textSpeed: number;\n\n            private _isSaved: boolean;\n\n            constructor() {\n                this.fontFace = \"Nanum Gothic\";\n                this.fontSize = 12;\n                this.fontBold = false;\n                this.fontItalic = false;\n                this.textColor = \"#000\";\n                this.outlineColor = \"#fff\";\n                this.outlineWidth = 1;\n                this.fontGradient = false;\n                this.highlightTextColor = null;\n                this.textSpeed = 1;\n\n                this._isSaved = false;\n            }\n\n            save<T extends Window_Base>(messageWindow: T) {\n                this.fontFace = messageWindow.contents.fontFace;\n                this.fontSize = +messageWindow.contents.fontSize;\n                this.fontBold = messageWindow.contents.fontBold;\n                this.fontItalic = messageWindow.contents.fontItalic;\n                this.textColor = messageWindow.contents.textColor;\n                this.outlineColor = messageWindow.contents.outlineColor;\n                this.outlineWidth = messageWindow.contents.outlineWidth;\n                this.fontGradient = messageWindow.contents.fontGradient;\n                this.highlightTextColor =\n                    messageWindow.contents.highlightTextColor;\n\n                if ($gameMessage) {\n                    this.textSpeed = $gameMessage.getWaitTime();\n                }\n\n                this._isSaved = true;\n            }\n\n            restore<T extends Window_Base>(messageWindow: T) {\n                if (!this._isSaved) return;\n                if (!(messageWindow.contents instanceof Bitmap)) return;\n                messageWindow.contents.fontFace = this.fontFace;\n                messageWindow.contents.fontSize = this.fontSize;\n                messageWindow.contents.fontBold = this.fontBold;\n                messageWindow.contents.fontItalic = this.fontItalic;\n                messageWindow.contents.textColor = this.textColor;\n                messageWindow.contents.outlineColor = this.outlineColor;\n                messageWindow.contents.outlineWidth = this.outlineWidth;\n                messageWindow.contents.fontGradient = this.fontGradient;\n                messageWindow.contents.highlightTextColor =\n                    this.highlightTextColor;\n                if ($gameMessage) {\n                    $gameMessage.setWaitTime(this.textSpeed);\n                }\n                this._isSaved = false;\n            }\n        }\n\n        //============================================================================\n        // Window_Base\n        //============================================================================\n\n        Window_Base.prototype.obtainEscapeCode = function (textState) {\n            const regExp = RS.MessageSystem.Reg.defaultEscapeCode;\n            const arr = regExp.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return arr[0].toUpperCase();\n            } else {\n                return \"\";\n            }\n        };\n\n        /**\n         * 확장된 색상 변경 텍스트 코드 처리\n         * \\색[빨강]과 웹색상 처리를 위한 정규 표현식 처리\n         * @param {}} textState\n         */\n        Window_Base.prototype.obtainNameColor = function (textState) {\n            const arr = /\\[(.+?)\\]/gi.exec(\n                textState.text.slice(textState.index)\n            );\n            if (arr) {\n                textState.index += arr[0].length;\n                return Color.gmColor(arr[1]);\n            } else {\n                return ColorManager.textColor(0);\n            }\n        };\n\n        Window_Base.prototype.changeTextColor = function (color) {\n            const c = parseInt(color);\n            // 색상 코드가 숫자인 경우\n            if (c > 0 && c < 32) {\n                color = ColorManager.textColor(color);\n            }\n            // if (!this._isUsedTextWidthEx) {\n            this.contents.textColor = color;\n            // }\n        };\n\n        const alias_Window_Base_processEscapeCharacter =\n            Window_Base.prototype.processEscapeCharacter;\n        Window_Base.prototype.processEscapeCharacter = function (\n            code,\n            textState\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case \"C\":\n                    this.changeTextColor(\n                        this.textColor(\n                            <number>this.obtainEscapeParam(textState)\n                        )\n                    );\n                    break;\n                case textCode[tcGroup.COLOR]:\n                    this.changeTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case \"I\":\n                case textCode[tcGroup.ICON]:\n                    this.processDrawIcon(\n                        <number>this.obtainEscapeParam(textState),\n                        textState\n                    );\n                    break;\n                case \"{\":\n                case textCode[tcGroup.INCREASE]:\n                    this.makeFontBigger();\n                    break;\n                case \"}\":\n                case textCode[tcGroup.DECREASE]:\n                    this.makeFontSmaller();\n                    break;\n                case \"AEND\":\n                    $gameMessage.clearAlignLast();\n                    break;\n                default:\n                    alias_Window_Base_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        const alias_loadWindowskin = Window_Base.prototype.loadWindowskin;\n        Window_Base.prototype.loadWindowskin = function () {\n            alias_loadWindowskin.call(this);\n            this.windowskin.addLoadListener(() => {\n                Color.baseColor = ColorManager.textColor(0);\n            });\n        };\n\n        Window_Base.prototype.getFontFace = function () {\n            const langCode =\n                RS.MessageSystem.Params.langCode ||\n                navigator.language.slice(0, 2);\n            const fonts = RS.MessageSystem.Params.fonts[langCode];\n            if (fonts) {\n                return fonts;\n            } else {\n                return RS.MessageSystem.Params.fonts.default;\n            }\n        };\n\n        Window_Base.prototype.drawTextEx = function (text, x, y, width) {\n            this.save();\n            this.resetFontSettings();\n            const textState = this.createTextState(text, x, y, width);\n            this.processAllText(textState);\n            this.restore();\n            return textState.outputWidth;\n        };\n\n        // Window_Base.prototype.processAllText = function (textState) {\n        //     this._isUsedTextWidthEx = !textState.drawing;\n        //     while (textState.index < textState.text.length) {\n        //         this.processCharacter(textState);\n        //     }\n        //     this.flushTextState(textState);\n        // };\n\n        Window_Base.prototype.makeFontSmaller = function () {\n            if (this.contents.fontSize >= RS.MessageSystem.Params.minFontSize) {\n                this.contents.fontSize -= 12;\n            }\n        };\n\n        Window_Base.prototype.resetFontSettings = function () {\n            this.contents.fontFace = this.getFontFace();\n            this.contents.fontSize = RS.MessageSystem.Params.fontSize;\n            this.contents.fontBold = false;\n            this.contents.fontItalic = false;\n            this.contents.outlineWidth =\n                RS.MessageSystem.Params.defaultOutlineWidth;\n            this.contents.outlineColor =\n                RS.MessageSystem.Params.defaultOutlineColor;\n\n            this.contents.fontGradient = false;\n            this.contents.highlightTextColor = null;\n            this.resetTextColor();\n        };\n\n        Window_Base.prototype.makeFontBigger = function () {\n            if (this.contents.fontSize <= RS.MessageSystem.Params.maxFontSize) {\n                this.contents.fontSize += 12;\n            }\n        };\n\n        Window_Base.prototype.save = function () {\n            this._messageDesc = new MessageDesc();\n            this._messageDesc.save(this);\n            console.log(this._messageDesc);\n        };\n\n        Window_Base.prototype.restore = function () {\n            if (!this._messageDesc) return;\n            this._messageDesc.restore(this);\n            this._messageDesc = undefined;\n        };\n\n        const alias_Window_Base_convertEscapeCharacters =\n            Window_Base.prototype.convertEscapeCharacters;\n        Window_Base.prototype.convertEscapeCharacters = function (text) {\n            const regGroup = RS.MessageSystem.Reg.Group;\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n\n            text = alias_Window_Base_convertEscapeCharacters.call(this, text);\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]): string {\n                    return $gameVariables\n                        .value(parseInt(<string>args[1]))\n                        .toString();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.VAR],\n                function (...args: any[]) {\n                    return $gameVariables.value(parseInt(args[1])).toString();\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.PLAYER], (...args: any[]) => {\n                return this.actorName(parseInt(args[1]));\n            });\n            text = text.replace(\n                regGroup[tcGroup.PARTY_MEMBER],\n                (...args: any[]) => {\n                    return this.partyMemberName(parseInt(args[1]));\n                }\n            );\n            text = text.replace(\n                regGroup[tcGroup.NUM],\n                function (...args: any[]) {\n                    return args[1].toComma();\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.GOLD],\n                TextManager.currencyUnit\n            );\n            text = text.replace(\n                regGroup[tcGroup.CLASSES],\n                function (...args: any[]) {\n                    return $dataClasses[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITEM],\n                function (...args: any[]) {\n                    return $dataItems[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.WEAPON],\n                function (...args: any[]) {\n                    return $dataWeapons[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ARMOR],\n                function (...args: any[]) {\n                    return $dataArmors[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY],\n                function (...args: any[]) {\n                    return $dataEnemies[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.STATE],\n                function (...args: any[]) {\n                    return $dataStates[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.SKILL],\n                function (...args: any[]) {\n                    return $dataSkills[parseInt(args[1])].name || \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_LEFT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[0]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_CENTER],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[1]\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ALIGN_RIGHT],\n                function () {\n                    return \"\\x1b\" + textCode[tcGroup.ALIGN] + \"[2]\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.ALIGN], (...args: any[]) => {\n                if (!this._isUsedTextWidthEx) {\n                    $gameMessage.setAlign(Number(args[1] || 0));\n                }\n                return \"\";\n            });\n            text = text.replace(\n                /<\\/LEFT>|<\\/CENTER>|<\\/RIGHT>/gi,\n                function () {\n                    return regGroup[tcGroup.ALIGN_CLEAR].source;\n                }.bind(this)\n            );\n            return text;\n        };\n\n        /**\n         * @deprecated\n         */\n        Window_Base.prototype.textPadding = function () {\n            return this.itemPadding();\n        };\n\n        Window_Base.prototype.newLineX = function (textState) {\n            return this.textPadding();\n        };\n\n        Window_Base.prototype.processAlign = function (textState) {\n            textState = textState || this._textState;\n\n            const isArabic = textState.rtl;\n\n            if (isArabic) {\n                return;\n            }\n\n            switch ($gameMessage.getAlign()) {\n                case 0:\n                    this.setAlignLeft(textState);\n                    break;\n                case 1:\n                    this.setAlignCenter(textState);\n                    break;\n                case 2:\n                    this.setAlignRight(textState);\n                    break;\n            }\n        };\n\n        const alias_Window_Base_processNewLine_align =\n            Window_Base.prototype.processNewLine;\n        Window_Base.prototype.processNewLine = function (textState) {\n            alias_Window_Base_processNewLine_align.call(this, textState);\n            this.processAlign(<TextState>textState);\n        };\n\n        Window_Base.prototype.setAlignLeft = function (textState) {\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignCenter = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                (this.newLineX(textState) + this.contentsWidth() + padding) /\n                    2 -\n                textState.outputWidth / 2;\n            textState.startX = textState.x;\n        };\n\n        Window_Base.prototype.setAlignRight = function (textState) {\n            const padding = this.textPadding();\n            textState.x =\n                this.contentsWidth() - padding - textState.outputWidth;\n            textState.startX = textState.x;\n        };\n\n        //============================================================================\n        // Window_Message\n        //============================================================================\n\n        Window_Message.prototype.obtainTextSpeed = function (textState) {\n            const arr = /\\[(\\d+)\\]/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return parseInt(arr[1]);\n            } else {\n                return 0;\n            }\n        };\n\n        Window_Message.prototype.obtainGradientText = function (textState) {\n            const arr = /^<(.+?)>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"Empty Text\";\n            }\n        };\n\n        Window_Message.prototype.obtainSoundName = function (textState) {\n            const arr = /\\<(.+?)\\>/.exec(textState.text.slice(textState.index));\n            if (arr) {\n                textState.index += arr[0].length;\n                return String(arr[1]);\n            } else {\n                return \"\";\n            }\n        };\n\n        const alias_Window_Message_processEscapeCharacter =\n            Window_Message.prototype.processEscapeCharacter;\n        Window_Message.prototype.processEscapeCharacter = function (\n            code,\n            textState: TextState | string\n        ) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            switch (code) {\n                case textCode[tcGroup.TEXT_SPEED]:\n                    $gameMessage.setWaitTime(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    break;\n                case textCode[tcGroup.TEXT_SIZE]:\n                    this.setTextSize(<number>this.obtainEscapeParam(textState));\n                    break;\n                case textCode[tcGroup.OUTLINE_COLOR]:\n                    this.setStrokeColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.INDENT]:\n                    this.setTextIndent(<TextState>textState);\n                    break;\n                case textCode[tcGroup.OUTLINE_WIDTH]:\n                    this.setStrokeWidth(\n                        <number>this.obtainEscapeParam(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.BOLD]:\n                    this.setTextBold(!this.contents.fontBold);\n                    break;\n                case textCode[tcGroup.BOLD_START]:\n                    this.setTextBold(true);\n                    break;\n                case textCode[tcGroup.BOLD_END]:\n                    this.setTextBold(false);\n                    break;\n                case textCode[tcGroup.ITALIC]:\n                    this.setTextItalic(!this.contents.fontItalic);\n                    break;\n                case textCode[tcGroup.ITALIC_START]:\n                    this.setTextItalic(true);\n                    break;\n                case textCode[tcGroup.ITALIC_END]:\n                    this.setTextItalic(false);\n                    break;\n                case textCode[tcGroup.GRADIENT]:\n                    this.setTextGradient(<TextState>textState);\n                    break;\n                case textCode[tcGroup.HIGHLIGHT_TEXT_COLOR]:\n                    this.setHighlightTextColor(\n                        this.obtainNameColor(<TextState>textState)\n                    );\n                    break;\n                case textCode[tcGroup.TAB]:\n                    (<TextState>textState).x += Number(\n                        this.textWidth(\"A\") * RS.MessageSystem.Params.TabSize\n                    );\n                    break;\n                case textCode[tcGroup.CARRIAGE_RETURN]:\n                    (<TextState>textState).x = Number(\n                        (textState as TextState).startX || 0\n                    );\n                    if (!this._isUsedTextWidthEx) this.startWait(1);\n                    break;\n                case textCode[tcGroup.PLAY_SE]:\n                    if (!this._isUsedTextWidthEx)\n                        this.playSe(this.obtainSoundName(<TextState>textState));\n                    break;\n                case textCode[tcGroup.SHOW_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.showPicture(\n                        this.obtainSoundName(<TextState>textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.HIDE_PICTURE]:\n                    if (this._isUsedTextWidthEx) break;\n                    this.erasePicture(\n                        <number>this.obtainEscapeParam(textState)\n                    );\n                    this.startWait(15);\n                case textCode[tcGroup.FACE]:\n                    if (this._isUsedTextWidthEx) break;\n                    var params = this.obtainSoundName(\n                        <TextState>textState\n                    ).split(\",\");\n                    // this.redrawFaceImage(textState, params[0], params[1], 0, 0);\n                    this.startWait(1);\n                    break;\n                default:\n                    alias_Window_Message_processEscapeCharacter.call(\n                        this,\n                        code,\n                        textState\n                    );\n                    break;\n            }\n        };\n\n        Window_Message.prototype.setTextItalic = function (...args) {\n            this.contents.fontItalic = args[0];\n        };\n\n        Window_Message.prototype.setTextBold = function (...args) {\n            this.contents.fontBold = args[0];\n        };\n\n        Window_Message.prototype.setTextSize = function (...args) {\n            this.contents.fontSize = args[0].clamp(\n                RS.MessageSystem.Params.minFontSize,\n                RS.MessageSystem.Params.maxFontSize\n            );\n        };\n\n        Window_Message.prototype.setStrokeWidth = function (...args) {\n            this.contents.outlineWidth = args[0];\n        };\n\n        Window_Message.prototype.setStrokeColor = function (...args) {\n            this.contents.outlineColor = args[0];\n        };\n\n        Window_Message.prototype.setTextIndent = function (textState) {\n            const value = parseInt(<string>this.obtainEscapeParam(textState));\n            textState.x += value;\n        };\n\n        Window_Message.prototype.setHighlightTextColor = function (\n            ...args: any[]\n        ) {\n            let color: any = args[0];\n            if (color === \"null\" || color === \"없음\") {\n                color = null;\n            }\n            this.contents.highlightTextColor = color;\n        };\n\n        Window_Message.prototype.setTextGradient = function (textState) {\n            // TODO: 여기에서는 텍스트를 그리지 않는다.\n            // TODO: 그레디언트 모드임을 명시하고 flush 단계에서 한 번에 그려야 한다 (배경색도 마찬가지이다)\n            this.contents.fontGradient = true;\n        };\n\n        Window_Message.prototype.playSe = function (seName) {\n            const realName = seName.trim();\n            const data = <rm.types.AudioParameters>{\n                name: realName,\n                pan: 0,\n                pitch: 100,\n                volume: (<any>ConfigManager).seVolume,\n            };\n            AudioManager.playSe(data);\n        };\n\n        Window_Message.prototype.showPicture = function (param: string) {\n            const raw = param.split(\",\").map((e) => {\n                return e.trim();\n            });\n\n            let params = [\n                Number(raw[0]),\n                raw[1],\n                Number(raw[2]),\n                Number(raw[3]),\n                Number(raw[4]),\n                100,\n                100,\n                255,\n                0,\n            ];\n            let ret = true;\n\n            // 모든 요소 검증\n            if (params) {\n                params.forEach((e, i, a) => {\n                    if (e === undefined || e === null) {\n                        ret = false;\n                    }\n                });\n            }\n            // 검증 결과가 참이라면 그림 표시\n            if (ret) {\n                $gameScreen.showPicture.apply($gameScreen, <any>params);\n                return true;\n            }\n            return false;\n        };\n\n        Window_Message.prototype.erasePicture = function (picId) {\n            if (typeof picId !== \"number\") return;\n            $gameScreen.erasePicture(picId);\n        };\n\n        // 구조가 변경된 메서드\n        Window_Message.prototype.resetFontSettings = function () {\n            Window_Base.prototype.resetFontSettings.call(this);\n\n            // pause 아이콘 표시 위치 초기화\n            if (this._pauseSignSprite) {\n                this._pauseSignSprite.move(this._width / 2, this._height);\n                this._pauseSignSprite.scale.y = 1;\n            }\n\n            $gameMessage.setWaitTime(RS.MessageSystem.Params.textSpeed);\n        };\n\n        // 새로 추가된 메서드\n        Window_Message.prototype.resetGradient = function (textState) {\n            this.contents.fontGradient = false;\n        };\n\n        // 폰트 사이즈 설정 메서드는 MZ에서 없다\n        Window_Message.prototype.numVisibleRows = function () {\n            return RS.MessageSystem.Params.numVisibleRows;\n        };\n\n        /**\n         * Create text state included px and py values for text word wrapping.\n         */\n        const alias_Window_Message_createTextState =\n            Window_Message.prototype.createTextState;\n        Window_Message.prototype.createTextState = function (\n            text,\n            x,\n            y,\n            width\n        ) {\n            let textState = alias_Window_Message_createTextState.call(\n                this,\n                text,\n                x,\n                y,\n                width\n            );\n\n            const px = textState.x;\n            const py = textState.y;\n\n            // mixin\n            Object.assign(textState, {\n                px,\n                py,\n            });\n\n            return textState;\n        };\n\n        Window_Message.prototype.processWordWrap = function (\n            textState,\n            w,\n            width,\n            isValid\n        ) {\n            const px = <Required<number>>textState.px;\n\n            if (Math.floor(px + w * 2) > width) {\n                if (isValid) {\n                    this.processNewLine(textState);\n                    if (this.needsNewPage(textState)) {\n                        this.startPause();\n                    }\n                }\n            }\n        };\n\n        const alias_Window_Message_processNewLinePW =\n            Window_Message.prototype.processNewLine;\n        Window_Message.prototype.processNewLine = function (textState) {\n            alias_Window_Message_processNewLinePW.call(this, textState);\n            // 내부 버퍼의 위치를 시작 지점으로 초기화한다.\n            (<TextState>textState).px =\n                textState.startX || (<TextState>textState).x;\n\n            // background buffer 초기화\n            if (this._backBuffer && this._backBuffer.isDirty) {\n                const backTextState = this._backBuffer.textState;\n            }\n        };\n\n        /**\n         * ! Override\n         * @param {Object} textState\n         */\n        Window_Message.prototype.processCharacter = function (textState) {\n            const c = textState.text[textState.index++];\n            if (c.charCodeAt(0) < 0x20) {\n                this.flushTextState(textState);\n                this.processControlCharacter(textState, c);\n            } else {\n                textState.buffer += c;\n\n                // 내부 버퍼의 위치를 누적 계산한다.\n                textState.px += this.textWidth(c);\n            }\n        };\n\n        const alias_Window_Message_processCharacter =\n            Window_Message.prototype.processCharacter;\n        Window_Message.prototype.processCharacter = function (textState) {\n            // 이전 텍스트의 길이를 계산한다.\n            let isDirty = false;\n            const preBuffer = textState.buffer || \"\";\n            let preLen = preBuffer.length;\n\n            alias_Window_Message_processCharacter.call(this, textState);\n\n            // 새로운 텍스트가 이후에 있는가?\n            // 그게 문자인지 제어 문자인지는 이 로직에선 알 수 없다.\n            const postBuffer = textState.buffer || \"\";\n            const postLen = postBuffer.length;\n            if (preLen !== postLen) {\n                isDirty = true;\n            }\n\n            if (isDirty) {\n                // 끝에 있는 글자를 가지고 온다.\n                // 하지만 제어 문자인지는 확인하지 않는다.\n                // 제어 문자 여부는 메인 로직에서 판단하게 둔다.\n                const c = textState.buffer.substr(\n                    textState.buffer.length - 1,\n                    1\n                );\n                this.processNormalCharacterProxy(textState, c);\n            }\n        };\n\n        /**\n         * MZ에서는 processNormalCharacter의 구현이 없다.\n         * 하지만, 자동 개행이나 사운드 재생 그리고 배경색 묘화를 위해 위치 계산이 필요하다.\n         * 이 때문에 추가한 메서드이며, 텍스트의 묘화를 하진 않는다.\n         * @param {*} textState\n         * @param {*} c\n         */\n        Window_Message.prototype.processNormalCharacterProxy = function (\n            textState,\n            c\n        ) {\n            // MZ에서는 텍스트 상태(textState)가 다음 제어 문자가 등장해야 flush 처리된다.\n            // 따라서 이곳에서는 텍스트가 그려질 수 없다.\n            const w = this.textWidth(c);\n            let width = this.contentsWidth();\n\n            // 일반 메시지 모드에서만 동작 한다.\n            const isNormalMessageWindow = $gameMessage.getBalloon() === -2;\n            const isRealDrawingMode = textState.drawing;\n            let isValid =\n                isNormalMessageWindow &&\n                isRealDrawingMode &&\n                RS.MessageSystem.Params.isParagraphMinifier;\n\n            // 소수점 자리를 버려야 정확히 계산된다.\n            this.processWordWrap(textState, w, width, isValid);\n\n            const contents = this.contents;\n            const faceName = $gameMessage.faceName();\n\n            // if the faceName is not empty and the face direction is to right?\n            if (faceName !== \"\") {\n                width = contents.width - ImageManager.faceWidth;\n                isValid = RS.MessageSystem.Params.faceDirection === 2;\n                this.processWordWrap(textState, w, width, isValid);\n            }\n\n            // 배경색의 위치를 계산하고 비트맵 인스턴스를 생성한다.\n            const isValidTextBackground = contents.highlightTextColor !== null;\n            if (isValidTextBackground) {\n                const contentW = Math.floor(w * 2) + 1.0;\n                const contentH = this.lineHeight();\n\n                // 내부 버퍼의 텍스트 위치를 받아옵니다 (글자 하나의 버퍼 위치)\n                const { px, py } = <TextState>textState;\n\n                // 배경 버퍼의 생성\n                this._backBuffer = {\n                    buffer: new Bitmap(contentW, contentH),\n                    textState: textState,\n                    isDirty: false,\n                    x: px,\n                    y: py,\n                };\n\n                // 배경 버퍼는 내부 버퍼의 초기 위치로부터 계산된다.\n                this._backBuffer.buffer.fillAll(\n                    <string>contents.highlightTextColor\n                );\n                // 이 플래그가 활성화되어있다면 flushTextState에서 그리기 처리를 해야 한다.\n                this._backBuffer.isDirty = true;\n                this._backBuffer.textState = textState;\n            }\n        };\n\n        const alias_Window_Message_flushTextState =\n            Window_Message.prototype.flushTextState;\n        Window_Message.prototype.flushTextState = function (\n            textState: TextState\n        ) {\n            const isDrawing = textState.drawing; // !this._isUsedTextWidthEx와 같은 효과\n            const isSlowTextMode =\n                !this._showFast && !this.isEndOfText(textState) && isDrawing;\n            const isDrawingTextBackground =\n                isDrawing && this._backBuffer && this._backBuffer.isDirty;\n\n            if (isSlowTextMode) {\n                this.startWait($gameMessage.getWaitTime() || 0);\n            }\n\n            // 텍스트 코드를 만나면, flush가 시작되는데 배경색의 시작 라인이 달라지면,\n            // 다음 라인까지 배경색이 제대로 그려지지 않게 됩니다.\n            // 이는 MZ에서는 버퍼 방식이기 때문에 한 글자씩 배경색이 그려지지 않기 때문입니다.\n            // 따라서 라인이 달라질 때, flushBackground를 해줘야 합니다.\n            if (isDrawingTextBackground && isDrawing) {\n                const backBuffer = this._backBuffer;\n                const bitmap = backBuffer.buffer;\n                const backTextState = backBuffer.textState!;\n\n                if (backTextState.py !== textState.y) {\n                    this._backBuffer.isDirty = false;\n                    alias_Window_Message_flushTextState.call(this, textState);\n                    return;\n                }\n                let tx = backBuffer.x;\n                let ty = backBuffer.y;\n                const x = textState.x;\n                const y = textState.y;\n                const w = Math.min(this.innerWidth, Math.floor(bitmap.width));\n                const h = Math.min(this.innerHeight, Math.floor(bitmap.height));\n\n                // this.contents.blt(\n                //     bitmap,\n                //     0,\n                //     0,\n                //     w,\n                //     h,\n                //     Math.min(tx, y),\n                //     Math.min(ty, y)\n                // );\n                this._backBuffer.isDirty = false;\n            }\n\n            alias_Window_Message_flushTextState.call(this, textState);\n        };\n\n        /**\n         * 새로운 라인이 시작되기 전에 이전 라인에 그려야 할 배경색을 마저 그리는 기능입니다.\n         */\n        Window_Message.prototype.flushTextBackgbround = function (\n            textState: TextState\n        ) {};\n\n        Window_Message.prototype.updateBigFaceOpacity = function () {\n            if (!this._faceContents) {\n                return;\n            }\n            let { faceOpacity } = RS.MessageSystem.Params;\n            if (!faceOpacity) faceOpacity = 255;\n            const value = faceOpacity.clamp(0, 255);\n            this._faceContents.opacity = value;\n        };\n\n        Window_Message.prototype.fadeInOutFaceContents = function () {\n            if (!this._faceContents) {\n                return;\n            }\n\n            const isValid = this.isOpening() || this.isClosing();\n            if (isValid) {\n                const openness = (this.openness || 0).clamp(0, 255);\n                this._faceContents.scale.y = openness / 255;\n                this._faceContents.y =\n                    (this._faceContents.height / 2) * (1 - this.openness / 255);\n            }\n        };\n\n        const alias_Window_Message_checkToNotClose =\n            Window_Message.prototype.checkToNotClose;\n        Window_Message.prototype.checkToNotClose = function () {\n            this.fadeInOutFaceContents();\n            alias_Window_Message_checkToNotClose.call(this);\n        };\n\n        Window_Message.prototype.updateBalloonPosition = function () {\n            // Get the component\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPosition();\n            }\n        };\n\n        Window_Message.prototype.getDefaultSizeOption = function () {\n            const isMobileDevice = Utils.isMobileDevice();\n            const maxSW = isMobileDevice\n                ? window.outerWidth\n                : window.screen.availWidth;\n            const maxSH = isMobileDevice\n                ? window.outerHeight\n                : window.screen.availHeight;\n            const maxWidth = this.width;\n            const maxHeight = this.height;\n\n            return {\n                maxSW,\n                maxSH,\n                maxWidth,\n                maxHeight,\n                maxY: maxSH - maxHeight,\n                maxX: maxSW - maxWidth,\n            };\n        };\n\n        Window_Message.prototype.updatePlacement = function () {\n            const goldWindow = this._goldWindow;\n            const isNormalWindowMode = $gameMessage.getBalloon() === -2;\n            const isValidSceneIsMap = SceneManager._scene instanceof Scene_Map;\n            this._positionType = $gameMessage.positionType();\n\n            // 말풍선 모드가 아니라면 X좌표를 화면 중앙에 맞춘다.\n            if (isNormalWindowMode) {\n                const { maxWidth, maxHeight, maxX, maxY } =\n                    this.getDefaultSizeOption();\n\n                const desiredX =\n                    Graphics.width / 2 -\n                    maxWidth / 2 +\n                    RS.MessageSystem.Params.windowOffset.x;\n                const desiredY =\n                    (this._positionType * (Graphics.height - maxHeight)) / 2 +\n                    RS.MessageSystem.Params.windowOffset.y;\n\n                this.x = Math.min(desiredX, maxX);\n                this.y = Math.min(desiredY, maxY);\n            } else {\n                if (isValidSceneIsMap) {\n                    this.updateBalloonPosition();\n                }\n            }\n\n            // 골드 윈도우의 위치 설정\n            if (goldWindow) {\n                const minGoldY = goldWindow.height;\n                this._goldWindow.y =\n                    this.y > minGoldY ? 0 : Graphics.height - goldWindow.height;\n            }\n\n            // 투명도 업데이트\n            this.updateDefaultOpacity();\n            this.updateContentsOpacity();\n            this.updateBigFaceOpacity();\n\n            // 이름 윈도우 업데이트\n            // if (this._nameBoxWindow.isOpen() || this.areSettingsChanged()) {\n            //     this.updateNameWindow();\n            // }\n\n            // 얼굴 이미지의 Z-Index 업데이트\n            if ($gameMessage.faceName() !== \"\") {\n                const isBigFace = /^Big_/.exec($gameMessage.faceName());\n                const backIndex = 2;\n\n                if (RS.MessageSystem.Params.faceSide) {\n                    this.setFaceZIndex(isBigFace ? 0 : backIndex);\n                } else {\n                    this.setFaceZIndex(backIndex);\n                }\n            }\n        };\n\n        Window_Message.prototype.isAlreadyDrawnFace = function () {\n            return this._faceContents.bitmap || this.newLineX() > 0;\n        };\n\n        Window_Message.prototype.setFaceZIndex = function (zIndex = 0) {\n            const parent = this.parent;\n            const isFaceSide = RS.MessageSystem.Params.faceSide;\n\n            if (parent && isFaceSide) {\n                this.setChildIndex(this._faceContents, zIndex);\n            }\n        };\n\n        Window_Message.prototype.clearFaceBitmap = function () {\n            if (this._faceContents.bitmap) {\n                // @ts-ignore\n                this._faceContents.bitmap = null;\n            }\n        };\n\n        const alias_Window_Message_convertEscapeCharacters =\n            Window_Message.prototype.convertEscapeCharacters;\n        Window_Message.prototype.convertEscapeCharacters = function (text) {\n            const tcGroup = RS.MessageSystem.TextCodes.ENUM;\n            const textCode = RS.MessageSystem.TextCodes.Main;\n            const regGroup = RS.MessageSystem.Reg.Group;\n            text = alias_Window_Message_convertEscapeCharacters.call(\n                this,\n                text\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_START_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.BOLD_END_CV],\n                function () {\n                    return regGroup[tcGroup.BOLD_END].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_START_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_START].source;\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ITALIC_END_CV],\n                function () {\n                    return regGroup[tcGroup.ITALIC_END].source;\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.NAME], (...args) => {\n                let retName = args[1];\n\n                if (retName.endsWith(\":left\")) {\n                    retName = retName.replace(\":left\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"left\";\n                }\n                if (retName.endsWith(\":auto\")) {\n                    retName = retName.replace(\":auto\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"auto\";\n                }\n                if (retName.endsWith(\":center\")) {\n                    retName = retName.replace(\":center\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"center\";\n                }\n                if (retName.endsWith(\":opacity0\")) {\n                    retName = retName.replace(\":opacity0\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"opacity0\";\n                }\n                if (retName.endsWith(\":defaultOpacity\")) {\n                    retName = retName.replace(\":defaultOpacity\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX =\n                        \"defaultOpacity\";\n                }\n                if (retName.endsWith(\":right\")) {\n                    retName = retName.replace(\":right\", \"\");\n                    RS.MessageSystem.Params.namePositionTypeAtX = \"right\";\n                }\n                this._nameBoxWindow.setName(retName);\n                return \"\";\n            });\n            text = text.replace(\n                regGroup[tcGroup.BALLOON],\n                function () {\n                    const value = Number(arguments[1] || -2);\n                    if ($gameParty.inBattle()) {\n                        $gameMessage.setBalloon(\n                            // @ts-ignore\n                            value < 0\n                                ? \"ENEMIES : \" + Math.abs(value)\n                                : \"ACTORS : \" + value\n                        );\n                    } else {\n                        $gameMessage.setBalloon(value);\n                    }\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.FRIENDLY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ACTORS : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(\n                regGroup[tcGroup.ENEMY_TROOPS],\n                function () {\n                    const value = Number(arguments[1] || 0);\n                    $gameMessage.setBalloon(\n                        // @ts-ignore\n                        \"ENEMIES : \" + value\n                    );\n                    return \"\";\n                }.bind(this)\n            );\n            text = text.replace(regGroup[tcGroup.FACE_DIRECTION], () => {\n                const value = Number(arguments[1] || 0);\n                if (!this._isUsedTextWidthEx) {\n                    RS.MessageSystem.Params.faceDirection = value;\n                }\n                return \"\";\n            });\n            return text;\n        };\n\n        // Window_Message.prototype.terminateMessage\n\n        Window_Message.prototype.setHeight = function (n) {\n            this.contents.clear();\n            $gameMessage.setMaxLine(n);\n            this.height = this.fittingHeight(n);\n            this.createContents();\n            this.updatePlacement();\n        };\n\n        const alias_Window_Message_initialize =\n            Window_Message.prototype.initialize;\n        Window_Message.prototype.initialize = function (rect) {\n            alias_Window_Message_initialize.call(this, rect);\n            $gameTemp.setMSHeightFunc(this.setHeight.bind(this));\n            this.setHeight(RS.MessageSystem.Params.numVisibleRows);\n            this.createFaceContents();\n            this.on(\"removed\", this.removeEventHandler, this);\n            this.on(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        Window_Message.prototype.calcBalloonRect = function (text: string) {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            component.calcBalloonRect(text);\n        };\n\n        const alias_Window_Message_newPage = Window_Message.prototype.newPage;\n        Window_Message.prototype.newPage = function (textState) {\n            this.setFaceZIndex();\n            this.clearFaceBitmap();\n            this.loadWindowskin();\n            this.emit(\"onLoadWindowskin\");\n            this.openBalloon($gameMessage.getBalloon());\n            alias_Window_Message_newPage.call(this, textState);\n        };\n\n        Window_Message.prototype.updateBalloonPositionInBattle = function () {\n            const component = <BalloonWindowTransformComponent>(\n                DependencyInjector.getComponent(\n                    \"BalloonWindowTransformComponent\"\n                )\n            );\n            if (component) {\n                component.updateBalloonPositionInBattle();\n            }\n        };\n\n        Window_Message.prototype.openBalloon = function (sign) {\n            // 말풍선 모드가 아니면 빠져나간다.\n            if (sign === -2) {\n                this.resizeMessageSystem();\n                return;\n            }\n\n            this.setupOwner(sign);\n\n            // 전투 중일 경우\n            if (SceneManager._scene instanceof Scene_Battle) {\n                this.updateBalloonPositionInBattle();\n            } else {\n                this.updateBalloonPosition();\n            }\n        };\n\n        /**\n         * 1. start\n         */\n        const alias_Window_Message_startMessage =\n            Window_Message.prototype.startMessage;\n        Window_Message.prototype.startMessage = function () {\n            const text = $gameMessage.allText();\n            const textState = this.createTextState(text, 0, 0, 0);\n            textState.x = this.newLineX(textState);\n            textState.startX = textState.x;\n            this._textState = textState;\n\n            // 말풍선 영역을 계산합니다.\n            let tempText = textState.text.slice(0);\n            if (\n                $gameMessage.getBalloon() === -2 &&\n                RS.MessageSystem.Params.isParagraphMinifier\n            ) {\n                tempText = tempText.replace(/[\\r\\n]+/gm, \" \");\n            }\n            // ! BUG의 원인\n            this.calcBalloonRect(tempText);\n\n            this.newPage(this._textState);\n\n            // width 와 height를 재설정한다.\n            this.resizeMessageSystem(\"no reset\");\n\n            this.updatePlacement();\n            this.updateBackground();\n            this.open();\n            this._nameBoxWindow.start();\n        };\n\n        Window_Message.prototype.getDefaultWindowRect = function () {\n            return Scene_Message.prototype.messageWindowRect();\n        };\n\n        Window_Message.prototype.windowWidth = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.width;\n        };\n\n        Window_Message.prototype.windowHeight = function () {\n            const rect = this.getDefaultWindowRect();\n            return rect.height;\n        };\n\n        Window_Message.prototype.resizeMessageSystem = function (\n            ...args: any[]\n        ) {\n            const isResetOwner: Boolean = !(args.length > 0);\n\n            console.log(\"resize message system\");\n\n            if (!isResetOwner && SceneManager._scene instanceof Scene_Battle) {\n                return;\n            }\n\n            const n = $gameMessage.positionType();\n            const ox = RS.MessageSystem.Params.windowOffset.x;\n            const oy = RS.MessageSystem.Params.windowOffset.y;\n\n            const windowRect = {\n                width: this.windowWidth(),\n                height: this.windowHeight(),\n            };\n            const x = Graphics.width / 2 - windowRect.width / 2 + ox;\n            const y = (n * (Graphics.height - windowRect.height)) / 2 + oy;\n            const width = windowRect.width;\n            const height = windowRect.height;\n\n            if (x !== this.x) this.x = x;\n            if (y !== this.y) this.y = y;\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n            }\n\n            if (isResetOwner) {\n                $gameMap.setMsgOwner($gamePlayer);\n            }\n        };\n\n        Window_Message.prototype.removeEventHandler = function () {\n            this.off(\"onLoadWindowskin\", this.onLoadWindowskin, this);\n        };\n\n        /**\n         * TODO: ColorManager.textColor의 대체 구현.\n         *\n         * @param {Number} n\n         * @returns\n         */\n        Window_Message.prototype.textColor = function (n) {\n            const windowskin = this.windowskin;\n            if (!windowskin.isReady()) {\n                // Set the default text color if the windowskin is not ready.\n                return Color.baseColor;\n            }\n            const px = 96 + (n % 8) * 12 + 6;\n            const py = 144 + Math.floor(n / 8) * 12 + 6;\n            return windowskin.getPixel(px, py);\n        };\n\n        Window_Message.prototype.onLoadWindowskin = function () {\n            Color.baseColor = this.textColor(0);\n            this.changeTextColor(Color.baseColor);\n        };\n\n        Window_Message.prototype.loadWindowskin = function () {\n            const bitmap = ImageManager.loadSystem(\n                RS.MessageSystem.Params.windowskin\n            );\n\n            // if the windowskin is changed?\n            if (bitmap !== this.windowskin) {\n                this.windowskin = bitmap;\n                this._isDirtyWindowskin = false;\n                this.windowskin.addLoadListener(() => {\n                    this._isDirtyWindowskin = true;\n                });\n                if (!this.contents) {\n                    this.createContents();\n                }\n                // Set the default text color if the windowskin didn't load yet.\n                this.changeTextColor(Color.baseColor);\n\n                if (!this.windowskin.isReady()) {\n                    return setTimeout(() => this.loadWindowskin(), 10);\n                }\n            }\n        };\n\n        const _Window_Message_updateLoading =\n            Window_Message.prototype.updateLoading;\n        Window_Message.prototype.updateLoading = function () {\n            let ret = true;\n\n            if (this._isDirtyWindowskin) {\n                Color.baseColor = ColorManager.textColor(0);\n                this.changeTextColor(Color.baseColor);\n                this._isDirtyWindowskin = false;\n                ret = true;\n            }\n            return _Window_Message_updateLoading.call(this) && ret;\n        };\n\n        Window_Message.prototype.needsNewPage = function (textState) {\n            return (\n                !this.isEndOfText(textState) &&\n                textState.y + textState.height > this.contentsHeight()\n            );\n        };\n\n        Window_Message.prototype.createFaceContents = function () {\n            this._faceContents = new Sprite();\n            this._faceContents.x = 0;\n            this._faceContents.y = 0;\n\n            this.addChildAt(this._faceContents, 2);\n            return this._faceContents;\n        };\n\n        Window_Message.prototype.removeFaceContents = function () {\n            if (this._faceContents) this.removeChild(this._faceContents);\n        };\n\n        /**\n         * 큰 얼굴 이미지가 설정되었을 때 텍스트 시작 위치\n         */\n        Window_Message.prototype.newLineX = function () {\n            const reg = /^Big_/i;\n            const faceName = $gameMessage.faceName();\n            const faceIndex = $gameMessage.faceIndex();\n            if (reg.exec(faceName)) {\n                var faceStartX = RS.MessageSystem.Params.faceSide\n                    ? 0\n                    : RS.MessageSystem.Params.textStartX;\n                return faceIndex > 0 ? 0 : faceStartX;\n            } else {\n                if (RS.MessageSystem.Params.faceDirection === 2) return 0;\n                return faceName ? RS.MessageSystem.Params.faceStartOriginX : 0;\n            }\n        };\n\n        // TODO: 큰 얼굴 이미지 구현 필요\n\n        /**\n         * @param {String} faceName\n         */\n        Window_Message.prototype.isValidBigFace = function (faceName) {\n            const reg = /^Big_/i;\n            return reg.exec(faceName);\n        };\n\n        /**\n         * TODO: deprecated\n         */\n        Window_Message.prototype.updateNameWindow = function () {};\n\n        /**\n         * Window 구성 스프라이트 _windowBackSprite의 투명도를 조절합니다.\n         * TODO: deprecated\n         * @method standardBackOpacity\n         */\n        Window_Message.prototype.standardBackOpacity = function () {\n            return RS.MessageSystem.Params.backOpacity;\n        };\n\n        /**\n         * Bitmap의 context.globalAlpha 값을 변경합니다.\n         * @method translucentOpacity\n         */\n        Window_Message.prototype.translucentOpacity = function () {\n            return RS.MessageSystem.Params.translucentOpacity;\n        };\n\n        /**\n         * 윈도우를 구성하는 모든 객체의 투명도를 변경합니다.\n         * @method updateDefaultOpacity\n         */\n        Window_Message.prototype.updateDefaultOpacity = function () {\n            this.opacity = RS.MessageSystem.Params.defaultOpacity;\n        };\n\n        /**\n         * Window 구성 스프라이트 _windowContentsSprite의 투명도를 변경합니다.\n         * @method updateContentsOpacity\n         */\n        Window_Message.prototype.updateContentsOpacity = function () {\n            this.contentsOpacity = RS.MessageSystem.Params.contentsOpacity;\n        };\n\n        Window_Message.prototype.getSpriteActors = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameParty.members()) return null;\n            const max = $gameParty.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"actor\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.getSpriteEnemies = function (\n            sign: number\n        ): IBalloonSpriteTarget | null {\n            if (!$gameTroop.members()) return null;\n            const max = $gameTroop.members().length;\n            sign = sign.clamp(0, max);\n\n            return {\n                type: \"enemy\",\n                id: sign - 1,\n            };\n        };\n\n        Window_Message.prototype.setupOwner = function (sign) {\n            switch (sign) {\n                case -1: // 플레이어\n                    $gameMap.setMsgOwner($gamePlayer);\n                    break;\n                case 0: // 이 이벤트\n                    $gameMap.setMsgOwner(<Game_Event>$gameMap.getMsgEvent());\n                    break;\n                default:\n                    if (SceneManager._scene instanceof Scene_Battle) {\n                        // 전투 중인가?\n                        if (/(?:ENEMIES)[ ]*:(.*)/.test(sign.toString())) {\n                            // 적\n                            $gameMap.setMsgOwner(\n                                this.getSpriteEnemies(parseInt(RegExp.$1))\n                            );\n                        }\n                        if (/(?:ACTORS)[ ]*:(.*)/.test(sign.toString())) {\n                            // 아군\n                            $gameMap.setMsgOwner(\n                                this.getSpriteActors(parseInt(RegExp.$1))\n                            );\n                        }\n                    } else {\n                        // 맵 이벤트\n                        $gameMap.setMsgOwner($gameMap.event(sign));\n                    }\n                    break;\n            }\n        };\n\n        const alias_Window_Message_shouldBreakHere =\n            Window_Message.prototype.shouldBreakHere;\n        Window_Message.prototype.shouldBreakHere = function (text) {\n            const isBreakCharacter = alias_Window_Message_shouldBreakHere.call(\n                this,\n                text\n            );\n\n            if (isBreakCharacter) {\n                if (RS.MessageSystem.Params.isPlayTextSound) {\n                    const interval = RS.MessageSystem.Params.textSoundInterval;\n\n                    // prettier-ignore\n                    if ((this._textSoundInterval--) <= 0) {\n              AudioManager.playStaticSe(< rm.types.AudioParameters >{\n                  name: RS.MessageSystem.popParameter(\n                      \"Text Sound\",\n                      \"텍스트 효과음\"\n                  ),\n                  pan: 0,\n                  pitch: 100,\n                  volume: 90,\n              });\n              this._textSoundInterval = interval;\n          }\n                }\n            }\n\n            return isBreakCharacter;\n        };\n\n        //============================================================================\n        // Game_Interpreter\n        //============================================================================\n\n        Game_Interpreter.prototype.processMessageParams = function (\n            eventId: number,\n            index: number\n        ) {\n            const meta = <EventCommand.CommentMeta>(\n                RS.MessageSystem.getEventComments(eventId, index - 1)\n            );\n            if (meta[\"윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskin =\n                    meta[\"윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(RS.MessageSystem.Params.windowskin);\n            }\n            if (meta[\"이름 윈도우 스킨\"]) {\n                RS.MessageSystem.Params.windowskinForNameWindow =\n                    meta[\"이름 윈도우 스킨\"].trim() || \"Window\";\n                ImageManager.loadSystem(\n                    RS.MessageSystem.Params.windowskinForNameWindow\n                );\n            }\n            if (meta[\"라인 높이\"]) {\n                RS.MessageSystem.Params.lineHeight = parseInt(\n                    meta[\"라인 높이\"]\n                );\n            }\n            if (meta[\"폰트 크기\"]) {\n                RS.MessageSystem.Params.fontSize = parseInt(meta[\"폰트 크기\"]);\n            }\n            if (meta[\"라인\"]) {\n                RS.MessageSystem.Params.numVisibleRows = parseInt(meta[\"라인\"]);\n            }\n            if (meta[\"텍스트 시작 X\"]) {\n                RS.MessageSystem.Params.textStartX = parseInt(\n                    meta[\"텍스트 시작 X\"]\n                );\n            }\n            if (meta[\"큰 페이스칩 OX\"]) {\n                RS.MessageSystem.Params.faceOX = Number(meta[\"큰 페이스칩 OX\"]);\n            }\n            if (meta[\"큰 페이스칩 OY\"]) {\n                RS.MessageSystem.Params.faceOY = Number(meta[\"큰 페이스칩 OY\"]);\n            }\n            if (meta[\"대화창 뒤에 얼굴 표시\"]) {\n                RS.MessageSystem.Params.faceSide = Boolean(\n                    meta[\"대화창 뒤에 얼굴 표시\"] === \"true\"\n                );\n            }\n            if (meta[\"대화창 투명도\"]) {\n                RS.MessageSystem.Params.defaultOpacity = parseInt(\n                    meta[\"대화창 투명도\"]\n                );\n            }\n            if (meta[\"텍스트 효과음 재생 여부\"]) {\n                RS.MessageSystem.Params.isPlayTextSound = Boolean(\n                    meta[\"텍스트 효과음 재생 여부\"] === \"true\"\n                );\n            }\n            if (meta[\"기본 텍스트 출력 속도\"]) {\n                RS.MessageSystem.Params.textSpeed = Number(\n                    meta[\"기본 텍스트 출력 속도\"]\n                );\n            }\n        };\n\n        Game_Interpreter.prototype.isValidMultiLine = function () {\n            const codes = [];\n            let prevCode = 401;\n            let lineCount = 0;\n            for (let i = 1; i < 8; i++) {\n                const currentCommand = this._list[this._index + i];\n                if (currentCommand) {\n                    const code = currentCommand.code;\n                    codes.push(code);\n                    prevCode = code;\n                    if ([101, 401].contains(code)) {\n                        lineCount++;\n                    }\n                }\n            }\n            if (codes.contains(102)) {\n                return false;\n            } else if (codes.contains(103)) {\n                return false;\n            } else if ($gameMessage.getMaxLine() <= 4) {\n                return false;\n            } else if (lineCount <= 4) {\n                return false;\n            } else if (RS.MessageSystem.Params.choiceWindowStyle == \"RMXP\") {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        Game_Interpreter.prototype.command101 = function (params) {\n            if ($gameMessage.isBusy()) {\n                return false;\n            }\n\n            $gameMap.setMsgEvent(this.character(this._eventId > 0 ? 0 : -1));\n            $gameMessage.setFaceImage(params[0], params[1]);\n            $gameMessage.setBackground(params[2]);\n            $gameMessage.setPositionType(params[3]);\n            $gameMessage.setSpeakerName(params[4]);\n\n            this.processMessageParams(this._eventId, this._index);\n\n            if (this.isMultiLine()) {\n                this.multiLineAddMessage();\n            } else {\n                while (this.nextEventCode() === 401) {\n                    // Text data\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                }\n            }\n\n            switch (this.nextEventCode()) {\n                case 102: // Show Choices\n                    this._index++;\n                    this.setupChoices(this.currentCommand().parameters);\n                    break;\n                case 103: // Input Number\n                    this._index++;\n                    this.setupNumInput(this.currentCommand().parameters);\n                    break;\n                case 104: // Select Item\n                    this._index++;\n                    this.setupItemChoice(this.currentCommand().parameters);\n                    break;\n            }\n            this.setWaitMode(\"message\");\n            return true;\n        };\n\n        Game_Interpreter.prototype.multiLineAddMessage = function () {\n            this.initLineHeight();\n\n            while ($gameMessage._texts.length < $gameMessage.getMaxLine()) {\n                while (this.nextEventCode() === 401) {\n                    this._index++;\n                    $gameMessage.add(this.currentCommand().parameters[0]);\n                    this.addLineHeight();\n                    if (this._lineHeight >= $gameMessage.getMaxLine()) {\n                        break;\n                    }\n                }\n                if (this.nextEventCode() !== 101) {\n                    break;\n                }\n            }\n\n            // 커맨드 코드 401번이 아직 남아있는 상황이라면,\n            // 다음 인덱스로 넘겨야 선택지가 제대로 동작한다.\n            while (this.nextEventCode() === 401) {\n                this._index++;\n            }\n        };\n\n        Game_Interpreter.prototype.initLineHeight = function () {\n            this._lineHeight = 0;\n        };\n\n        Game_Interpreter.prototype.isMultiLine = function () {\n            return this.isValidMultiLine();\n        };\n\n        Game_Interpreter.prototype.addLineHeight = function () {\n            this._lineHeight++;\n            if (this.nextEventCode() === 101) {\n                this._index++;\n            }\n        };\n\n        //============================================================================\n        // Window_NameBox\n        //============================================================================\n\n        Window_NameBox.prototype.updatePlacement = function () {\n            this.width = this.windowWidth();\n            this.height = this.windowHeight();\n            const messageWindow = this._messageWindow;\n            if ($gameMessage.isRTL()) {\n                this.x = messageWindow.x + messageWindow.width - this.width;\n            } else {\n                this.x = messageWindow.x;\n            }\n            if (messageWindow.y > 0) {\n                this.y = messageWindow.y - this.height;\n            } else {\n                this.y = messageWindow.y + messageWindow.height;\n            }\n        };\n\n        //============================================================================\n        // Game_Temp\n        //============================================================================\n\n        Game_Temp.prototype.setMSHeightFunc = function (func) {\n            this._callMSHeightFunc = func;\n        };\n\n        Game_Temp.prototype.setMaxLine = function (n) {\n            if (this._callMSHeightFunc) this._callMSHeightFunc(n);\n        };\n\n        //============================================================================\n        // Game_Map\n        //============================================================================\n\n        const alias_Game_Map_initialize = Game_Map.prototype.initialize;\n        Game_Map.prototype.initialize = function () {\n            alias_Game_Map_initialize.call(this);\n            this._msgOwner = $gamePlayer;\n            this._msgEvent = 0;\n        };\n\n        Game_Map.prototype.getMsgOwner = function () {\n            return this._msgOwner;\n        };\n\n        /**\n         * @method setMsgOwner\n         * @param o {Game_Event | Game_Player}\n         */\n        Game_Map.prototype.setMsgOwner = function (o) {\n            this._msgOwner = o;\n            $gameMessage.setBalloonPatternHeight(this.tileHeight());\n        };\n\n        Game_Map.prototype.getMsgEvent = function () {\n            return this._msgEvent;\n        };\n\n        Game_Map.prototype.setMsgEvent = function (ev) {\n            this._msgEvent = ev;\n        };\n\n        /// ======================================================================\n        /// DI\n        /// ======================================================================\n        const alias_Scene_Message_associateWindows__enrtyPoint =\n            Scene_Message.prototype.associateWindows;\n        Scene_Message.prototype.associateWindows = function () {\n            alias_Scene_Message_associateWindows__enrtyPoint.call(this);\n            const messageWindow = this._messageWindow;\n            DependencyInjector.injectMessageWindow(messageWindow);\n            DependencyInjector.ready();\n        };\n\n        Scene_Message.prototype.messageWindowRect = function () {\n            const ww = Graphics.width;\n            const wh = this.calcWindowHeight(4, false) + 8;\n            const wx = (Graphics.height - ww) / 2;\n            const wy = 0;\n            return new Rectangle(wx, wy, ww, wh);\n        };\n\n        const alias_Scene_Message_terminate = Scene_Message.prototype.terminate;\n        Scene_Message.prototype.terminate = function () {\n            alias_Scene_Message_terminate.call(this);\n            DependencyInjector.ejectMessageWindow();\n        };\n\n        RS.MessageSystem.initSystem();\n\n        // ! [DEBUG]\n        if (RS.MessageSystem.Params.DEBUG) {\n            nw.Window.get().showDevTools();\n            const win = nw.Window.get();\n            win.moveTo(window.outerWidth / 3, 153);\n        }\n    })\n    .ready(\"bitmap\")\n    .ready(\"main\")\n    .executeAll();\n","/***\n * 이것은 RPG Maker MV 호환성을 위해 존재하며 타입스크립트로 재작성되어야 합니다.\n */\nimport { Types } from \"../types/parameters\";\n\ntype TextCodeKey =\n    | \"COLOR\"\n    | \"TEXT_SPEED\"\n    | \"OUTLINE_COLOR\"\n    | \"OUTLINE_WIDTH\"\n    | \"INDENT\"\n    | \"BOLD\"\n    | \"ITALIC\"\n    | \"NAME\"\n    | \"GRADIENT\"\n    | \"PARTY_MEMBER\"\n    | \"PLAYER\"\n    | \"VAR\"\n    | \"ICON\"\n    | \"INCREASE\"\n    | \"DECREASE\"\n    | \"GOLD\"\n    | \"BALLOON\"\n    | \"ALIGN\"\n    | \"NUM\"\n    | \"TEXT_SIZE\"\n    | \"TAB\"\n    | \"CARRIAGE_RETURN\"\n    | \"PLAY_SE\"\n    | \"SHOW_PICTURE\"\n    | \"HIDE_PICTURE\"\n    | \"ITEM\"\n    | \"WEAPON\"\n    | \"ARMOR\"\n    | \"CLASSES\"\n    | \"ENEMY\"\n    | \"STATE\"\n    | \"SKILL\"\n    | \"FACE\"\n    | \"FRIENDLY_TROOPS\"\n    | \"ENEMY_TROOPS\"\n    | \"WAIT_SEC_15\"\n    | \"WAIT_SEC_60\"\n    | \"START_PAUSE\"\n    | \"LINE_SHOW_FAST_LT\"\n    | \"LINE_SHOW_FAST_GT\"\n    | \"PAUSE_SKIP\"\n    | \"BOLD_START\"\n    | \"BOLD_END\"\n    | \"ITALIC_START\"\n    | \"ITALIC_END\"\n    | \"ALIGN_LEFT\"\n    | \"ALIGN_CENTER\"\n    | \"ALIGN_RIGHT\"\n    | \"BOLD_START_CV\"\n    | \"BOLD_END_CV\"\n    | \"ITALIC_START_CV\"\n    | \"ITALIC_END_CV\"\n    | \"ALIGN_CLEAR\"\n    | \"HIGHLIGHT_TEXT_COLOR\"\n    | \"FACE_DIRECTION\";\n\ninterface TextCodeEnum {\n    ENUM: Record<TextCodeKey, number>;\n}\n\ntype TextCode = Record<string, any> & TextCodeEnum;\n\nconst pluginParams = $plugins.filter((i) => {\n    return i.description.contains(\"<RS_MessageSystem>\");\n});\n\nconst pluginName = <Types.PluginName>(\n    (pluginParams.length > 0 && pluginParams[0].name)\n);\nconst parameters = <Types.PluginParameters>(\n    (pluginParams.length > 0 && pluginParams[0].parameters)\n);\n\nconst RS = <RS>{\n    MessageSystem: <IMessageSytem>{},\n};\n\nRS.MessageSystem.jsonParse = function (str: string) {\n    const retData = JSON.parse(str, (k, v) => {\n        try {\n            return RS.MessageSystem.jsonParse(v);\n        } catch (e) {\n            return v;\n        }\n    });\n\n    return retData;\n};\n\n/**\n * @method popParameter\n */\nRS.MessageSystem.popParameter = function (...args: any[]) {\n    const k = Object.keys(args);\n    let lastUsed = \"\";\n\n    while (k.length > 0) {\n        lastUsed = args[parseInt(<string>k.pop())];\n\n        // @ts-ignore\n        if (parameters[lastUsed]) return parameters[lastUsed];\n    }\n\n    return \"\";\n};\n\nRS.MessageSystem.Reg = {\n    Default: [],\n    Group: [],\n    Korean: [],\n    Chinese: [],\n    English: [],\n    Japanese: [],\n};\n\nenum MessageParams {\n    FACE_START_ORIGIN_X = 168,\n    NAME_WINDOW_WIDTH = 140,\n    NAME_WINDOW_ROWS = 1,\n    FONT_SIZE = 28,\n    STD_PADDING = 18,\n}\n\nRS.MessageSystem.Params = {\n    faceStartOriginX: MessageParams.FACE_START_ORIGIN_X,\n    nameWindowWidth: MessageParams.NAME_WINDOW_WIDTH,\n    nameWindowRows: MessageParams.NAME_WINDOW_ROWS,\n    FONT_SIZE: MessageParams.FONT_SIZE,\n    STD_PADDING: MessageParams.STD_PADDING,\n    isValidShakingChoice: false,\n    fontSize: Number(\n        RS.MessageSystem.popParameter(\"Font Size\", \"글꼴 크기\") || 28\n    ),\n    textSpeed: Number(\n        RS.MessageSystem.popParameter(\"Text Speed\", \"기본 텍스트 출력 속도\") ||\n            0\n    ),\n    minFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Min Size\", \"폰트 최소 크기\") || 24\n    ),\n    maxFontSize: Number(\n        RS.MessageSystem.popParameter(\"Text Max Size\", \"폰트 최대 크기\") || 96\n    ),\n    textStartX: Number(\n        RS.MessageSystem.popParameter(\"Text Start X\", \"텍스트 시작 X\")\n    ),\n    numVisibleRows: Number(\n        RS.MessageSystem.popParameter(\"numVisibleRows\", \"라인 갯수\") || 4\n    ),\n    gradientColor1: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor1\",\n            \"그레디언트 시작 색상\"\n        ) || \"#FFFFFF\"\n    ),\n    gradientColor2: String(\n        RS.MessageSystem.popParameter(\n            \"gradientColor2\",\n            \"그레디언트 중간 색상\"\n        ) || \"#F29661\"\n    ),\n    gradientColor3: String(\n        RS.MessageSystem.popParameter(\"gradientColor3\", \"그레디언트 끝 색상\") ||\n            \"#CC3D3D\"\n    ),\n    nameWindowX: Number(\n        RS.MessageSystem.popParameter(\"Name Window X\", \"이름 윈도우 X\") || 0\n    ),\n    nameWindowY: Number(\n        RS.MessageSystem.popParameter(\"Name Window Y\", \"이름 윈도우 Y\") || 0\n    ),\n    nameWindowStdPadding: Number(\n        RS.MessageSystem.popParameter(\n            \"Name Window Inner Padding\",\n            \"이름 윈도우 안쪽 여백\"\n        ) || 18\n    ),\n    namePositionTypeAtX:\n        RS.MessageSystem.popParameter(\n            \"Name Window Position\",\n            \"이름 윈도우 위치\"\n        ) || \"left\",\n    faceOX: Number(\n        RS.MessageSystem.popParameter(\"Big Face OX\", \"큰 페이스칩 OX\") || 0\n    ),\n    faceOY: Number(\n        RS.MessageSystem.popParameter(\"Big Face OY\", \"큰 페이스칩 OY\") || 0\n    ),\n    faceSide: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Show Big Face Back\",\n            \"대화창 뒤에 얼굴 표시\"\n        ) === \"true\" || false\n    ),\n    WIDTH: MessageParams.FONT_SIZE * 6 + MessageParams.STD_PADDING,\n    HEIGHT: MessageParams.FONT_SIZE + MessageParams.STD_PADDING / 2,\n    TabSize: Number(RS.MessageSystem.popParameter(\"Tab Size\", \"탭 크기\")),\n    backOpacity: Number(\n        RS.MessageSystem.popParameter(\"back Opacity\", \"배경 그림의 투명도\")\n    ),\n    translucentOpacity: Number(\n        RS.MessageSystem.popParameter(\"translucent Opacity\", \"반투명도\")\n    ),\n    defaultOpacity: Number(\n        RS.MessageSystem.popParameter(\"default Opacity\", \"기본 투명도\")\n    ),\n    contentsOpacity: Number(\n        RS.MessageSystem.popParameter(\"contents Opacity\", \"내용의 투명도\")\n    ),\n    defaultOutlineWidth: Number(\n        RS.MessageSystem.popParameter(\"default outline width\", \"테두리 크기\")\n    ),\n    defaultOutlineColor:\n        RS.MessageSystem.popParameter(\"default outline Color\", \"테두리 색상\") ||\n        \"white\",\n    fonts: {\n        default: \"rmmz-mainfont\",\n    },\n    isTempSpriteContainerVisibility: false,\n    lineHeight: 36,\n    windowOffset: new Point(-4, -4),\n    fontSmoothingEnabled: true,\n    customFont: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Using Custom Font\",\n            \"사용자 지정 폰트 사용 여부\"\n        ) === \"true\"\n    ),\n    customFontName: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Name\",\n            \"사용자 지정 폰트명\"\n        ) || \"GameFont\"\n    ),\n    customFontSrc: String(\n        RS.MessageSystem.popParameter(\n            \"Custom Font Src\",\n            \"사용자 지정 폰트 경로\"\n        ) || \"fonts/mplus-1m-regular.ttf\"\n    ),\n    windowskin:\n        RS.MessageSystem.popParameter(\n            \"Default Windowskin\",\n            \"기본 윈도우스킨\"\n        ) || \"Window\",\n    windowskinForNameWindow:\n        RS.MessageSystem.popParameter(\"Name Windowskin\", \"이름 윈도우스킨\") ||\n        \"Window\",\n    choiceWindowStyle: String(\n        RS.MessageSystem.popParameter(\"Choice Style\", \"선택지 스타일\") ||\n            \"default\"\n    ),\n    defaultChoicePostion: parameters[\"Default Choice Position\"] || \"right\",\n    exTextColors: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\"Text Color\", \"텍스트 색상\")\n    ),\n    isPlayTextSound: Boolean(\n        RS.MessageSystem.popParameter(\n            \"Text Sound ON/OFF\",\n            \"텍스트 효과음 재생 여부\"\n        ) === \"true\"\n    ),\n    pathTextSound: String(\n        RS.MessageSystem.popParameter(\"Text Sound\", \"텍스트 효과음\") ||\n            \"Cursor1.ogg\"\n    ),\n    textSoundEval1: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Execution Condition\",\n            \"텍스트 효과음 실행 조건\"\n        ) || \"Math.randomInt(100) < 45\"\n    ),\n    textSoundEval2: RS.MessageSystem.jsonParse(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Volume\",\n            \"텍스트 효과음 볼륨\"\n        ) || \"(0.4 + (RS.MessageSystem.randomNormal(0.8)[0])).clamp(0.0, 0.8)\"\n    ),\n    textSoundInterval: parseInt(\n        RS.MessageSystem.popParameter(\n            \"Text Sound Interval\",\n            \"텍스트 사운드 재생 간격\"\n        )\n    ),\n    textSoundPoolSize: parseInt(\n        RS.MessageSystem.popParameter(\n            \"텍스트 사운드 풀 크기\",\n            \"Text Sound Pool Size\"\n        ) || 6\n    ),\n    langCode:\n        RS.MessageSystem.popParameter(\"언어 코드\", \"Language Code\") || \"ko\",\n    preloadWindowskins: JSON.parse(parameters[\"preload windowskin\"] || \"[]\"),\n    isParagraphMinifier: Boolean(parameters[\"Paragraph Minifier\"] === \"true\"),\n    gradientStyle: parameters[\"Gradient Style\"],\n    faceOpacity: parseInt(parameters[\"face Opacity\"] || 21),\n    faceDirection: parseInt(parameters[\"face Direction\"] || 0),\n    DEBUG: true,\n};\n\n(() => {\n    const systemFonts: Types.SystemFonts = RS.MessageSystem.jsonParse(\n        parameters[\"systemFont\"]\n    );\n    if (!RS.MessageSystem.Params.fonts) return;\n\n    // ! 여기서부터 변환 시작해야함\n    systemFonts.settings.forEach((i) => {\n        const params = <{ [key: string]: any } | any>{};\n        params[i.languageCode] = i.fontName;\n        Object.assign(RS.MessageSystem.Params.fonts as {}, params);\n    });\n})();\n\n//============================================================================\n// Lazy Initialize Parameters (느린 초기화)\n//============================================================================\n\nvar alias_Game_Temp_initialize = Game_Temp.prototype.initialize;\nGame_Temp.prototype.initialize = function () {\n    alias_Game_Temp_initialize.call(this);\n    RS.MessageSystem.Params.windowWidth =\n        eval(parameters[\"Window Width\"]) || Graphics.boxWidth;\n};\n\n//============================================================================\n// Multiple Language supports\n//============================================================================\n\nRS.MessageSystem.Reg.KoreanEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z가-힣]+[!]*/i;\nRS.MessageSystem.Reg.ChineseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[a-zA-Z一-鼣]+[!]*/i;\nRS.MessageSystem.Reg.EnglishEscapeCode = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+[!]*/i;\nRS.MessageSystem.Reg.JapaneseEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z\\u3040-\\u309F\\u30A0-\\u30FF\\u3300-\\u33FF\\u4E00-\\u9FFF\\uFF00-\\uFFEF]+[!]*/i;\nRS.MessageSystem.Reg.defaultEscapeCode =\n    /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z가-힣]+[!]*/i;\n\nRS.MessageSystem.TextCodes = (function () {\n    const rowData = RS.MessageSystem.popParameter(\"Text Code\", \"텍스트 코드\");\n    const data = JSON.parse(rowData);\n    const retData = <TextCode>{};\n\n    retData.Korean = [undefined].concat(JSON.parse(data.Korean));\n    retData.Chinese = [undefined].concat(JSON.parse(data.Chinese));\n    retData.English = [undefined].concat(JSON.parse(data.English));\n    retData.Japanese = [undefined].concat(JSON.parse(data.Japanese));\n\n    return retData;\n})();\n\nRS.MessageSystem.TextCodes.Main = [];\n\nRS.MessageSystem.TextCodes.ENUM = {\n    COLOR: 1,\n    TEXT_SPEED: 2,\n    OUTLINE_COLOR: 3,\n    OUTLINE_WIDTH: 4,\n    INDENT: 5,\n    BOLD: 6,\n    ITALIC: 7,\n    NAME: 8,\n    GRADIENT: 9,\n    PARTY_MEMBER: 10,\n    PLAYER: 11,\n    VAR: 12,\n    ICON: 13,\n    INCREASE: 14,\n    DECREASE: 15,\n    GOLD: 16,\n    BALLOON: 17,\n    ALIGN: 18,\n    NUM: 19,\n    TEXT_SIZE: 20,\n    TAB: 21,\n    CARRIAGE_RETURN: 22,\n    PLAY_SE: 23,\n    SHOW_PICTURE: 24,\n    HIDE_PICTURE: 25,\n    ITEM: 26,\n    WEAPON: 27,\n    ARMOR: 28,\n    CLASSES: 29,\n    ENEMY: 30,\n    STATE: 31,\n    SKILL: 32,\n    FACE: 33,\n    FRIENDLY_TROOPS: 34, // 여긴 2018.01.14에 추가됨\n    ENEMY_TROOPS: 35,\n    WAIT_SEC_15: 36, // .\n    WAIT_SEC_60: 37, // |\n    START_PAUSE: 38, // !\n    LINE_SHOW_FAST_LT: 39, // <\n    LINE_SHOW_FAST_GT: 40, // >\n    PAUSE_SKIP: 41, // ^\n    BOLD_START: 42, // <B>\n    BOLD_END: 43, // </B>\n    ITALIC_START: 44,\n    ITALIC_END: 45,\n    ALIGN_LEFT: 46,\n    ALIGN_CENTER: 47,\n    ALIGN_RIGHT: 48,\n    BOLD_START_CV: 49,\n    BOLD_END_CV: 50,\n    ITALIC_START_CV: 51,\n    ITALIC_END_CV: 52,\n    ALIGN_CLEAR: 53, // AEND\n    HIGHLIGHT_TEXT_COLOR: 54,\n    FACE_DIRECTION: 55,\n};\n\n/**\n * 주어진 ID 값으로 텍스트 코드를 현지화하여 반환합니다.\n * @param {Number} idx\n */\nRS.MessageSystem.getTextCode = function (idx: number) {\n    const langCode = RS.MessageSystem.Params.langCode;\n\n    if (langCode.match(/ko/)) {\n        return RS.MessageSystem.TextCodes[\"Korean\"][idx];\n    }\n    if (langCode.match(/zh/)) {\n        return RS.MessageSystem.TextCodes[\"Chinese\"][idx];\n    }\n    if (langCode.match(/en/)) {\n        return RS.MessageSystem.TextCodes[\"English\"][idx];\n    }\n    if (langCode.match(/ja/)) {\n        return RS.MessageSystem.TextCodes[\"Japanese\"][idx];\n    }\n    return RS.MessageSystem.TextCodes[\"English\"][idx];\n};\n\n/**\n * 노트 태그를 읽습니다.\n * @memberof RS.MessageSystem\n * @param {Number} eventId\n * @return {Object} meta\n */\nRS.MessageSystem.getEventComments = function (eventId: number, index: number) {\n    let data = <Record<any, any>>{\n        note: \"\",\n        meta: {},\n    };\n    try {\n        // 리스트를 가져옵니다.\n        let list = $gameMap.event(eventId).list();\n\n        // 바로 이전 인덱스에 노트 태그가 있었는 지 확인합니다.\n        if (index < 0) index = 0;\n\n        // 부모 이벤트 없이 호출되는 공통 이벤트가 있는 지 확인합니다.\n        if (eventId <= 0) {\n            var commonEvent = $gameTemp.reservedCommonEvent();\n            if (commonEvent) {\n                list = commonEvent.list;\n                // 공통 이벤트는 한 번 설치된 후 클리어되므로 목록을 두 번 읽을 순 없으므로 예외 처리\n                if (!list) {\n                    return data;\n                }\n            }\n        }\n\n        let param = list[index];\n\n        // 코멘트를 읽어옵니다.\n        while (param && [108, 408].contains(param.code)) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n            index--;\n            param = list[index];\n        }\n\n        if (param && param.code === 108) {\n            data.note += param.parameters[0] + \"\\r\\n\";\n\n            index--;\n            param = list[index];\n\n            while (param.code === 408) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n                index--;\n                param = list[index];\n            }\n\n            if (param.code === 108) {\n                data.note += param.parameters[0] + \"\\r\\n\";\n            }\n        }\n\n        // 노트 태그를 추출합니다 (DataManager.extractMetadata의 변형입니다)\n        const re = /<([^<>:]+)(:?)([^>]*)>/g;\n        data.meta = {};\n        for (;;) {\n            const match = re.exec(data.note);\n            if (match) {\n                if (match[2] === \":\") {\n                    data.meta[match[1].trim()] = match[3];\n                } else {\n                    data.meta[match[1].trim()] = true;\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (e) {\n        // 리스트를 읽지 못할 경우 try-catch 문에 의해 예외 처리가 됩니다.\n        return {\n            note: \"\",\n            meta: {},\n        };\n    }\n    return data.meta;\n};\n\n(() => {\n    \"use strict\";\n    var regData = [\"Korean\", \"English\", \"Chinese\", \"Japanese\"];\n    regData.forEach(function (e, i, a) {\n        var tcGroup = RS.MessageSystem.TextCodes[e];\n        tcGroup = tcGroup.map((e: any, i: number, a: any[]) => {\n            if (e === undefined) return;\n            var data = [];\n            var ret = \"\";\n            for (var str of e) {\n                if (/[a-zA-Z]/i) {\n                    data.push(str);\n                    continue;\n                }\n                var text = str.charCodeAt().toString(16);\n                data.push(\"\\\\u\" + \"{\" + text + \"}\");\n            }\n            ret = data.join(\"\");\n            return ret;\n        });\n        RS.MessageSystem.Reg[e][0] = undefined;\n        RS.MessageSystem.Reg[e][1] = new RegExp(\n            `(?:\\x1bC|\\x1b${tcGroup[1]})\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 색\n        RS.MessageSystem.Reg[e][2] = new RegExp(\n            `\\x1b${tcGroup[2]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 속도\n        RS.MessageSystem.Reg[e][3] = new RegExp(\n            `\\x1b${tcGroup[3]}\\\\[(.+?)\\\\]`,\n            \"gi\"\n        ); // 테두리색\n        RS.MessageSystem.Reg[e][4] = new RegExp(\n            `\\x1b${tcGroup[4]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 테두리크기\n        RS.MessageSystem.Reg[e][5] = new RegExp(\n            `\\x1b${tcGroup[5]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 들여쓰기\n        RS.MessageSystem.Reg[e][6] = new RegExp(`\\x1b${tcGroup[6]}`, \"gi\"); // 굵게!\n        RS.MessageSystem.Reg[e][7] = new RegExp(`\\x1b${tcGroup[7]}`, \"gi\"); // 이탤릭!\n        RS.MessageSystem.Reg[e][8] = new RegExp(\n            `\\x1b${tcGroup[8]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 이름\n        RS.MessageSystem.Reg[e][9] = new RegExp(\n            `\\x1b${tcGroup[9]}\\\\<(.+)\\\\>`,\n            \"gi\"\n        ); // 그레디언트\n        RS.MessageSystem.Reg[e][10] = new RegExp(\n            `(?:\\x1bP|\\x1b${tcGroup[10]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 파티원\n        RS.MessageSystem.Reg[e][11] = new RegExp(\n            `(?:\\x1bN|\\x1b${tcGroup[11]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 주인공\n        RS.MessageSystem.Reg[e][12] = new RegExp(\n            `(?:\\x1bV|\\x1b${tcGroup[12]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 변수\n        RS.MessageSystem.Reg[e][13] = new RegExp(\n            `(?:\\x1bI|\\x1b${tcGroup[13]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이콘\n        RS.MessageSystem.Reg[e][14] = new RegExp(\n            `(?:\\x1b{|\\x1b${tcGroup[14]})`,\n            \"gi\"\n        ); // 확대!\n        RS.MessageSystem.Reg[e][15] = new RegExp(\n            `(?:\\x1b}|\\x1b${tcGroup[15]})`,\n            \"gi\"\n        ); // 축소!\n        RS.MessageSystem.Reg[e][16] = new RegExp(\n            `(?:\\x1bG|\\x1b${tcGroup[16]})`,\n            \"gi\"\n        ); // 골드\n        RS.MessageSystem.Reg[e][17] = new RegExp(\n            `\\x1b${tcGroup[17]}\\\\[(.*?)\\\\]`,\n            \"gi\"\n        ); // 말풍선\n        RS.MessageSystem.Reg[e][18] = new RegExp(\n            `\\x1b${tcGroup[18]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 정렬자\n        RS.MessageSystem.Reg[e][19] = new RegExp(\n            `\\x1b${tcGroup[19]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 숫자\n        RS.MessageSystem.Reg[e][20] = new RegExp(\n            `\\x1b${tcGroup[20]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 크기\n        RS.MessageSystem.Reg[e][21] = new RegExp(`\\x1b${tcGroup[21]}`, \"gi\"); // r\n        RS.MessageSystem.Reg[e][22] = new RegExp(`\\x1b${tcGroup[22]}`, \"gi\"); // t\n        RS.MessageSystem.Reg[e][23] = new RegExp(\n            `\\x1b${tcGroup[23]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 효과음\n        RS.MessageSystem.Reg[e][24] = new RegExp(\n            `\\x1b${tcGroup[24]}\\\\<(.+?)\\\\>`,\n            \"gi\"\n        ); // 그림 표시\n        RS.MessageSystem.Reg[e][25] = new RegExp(\n            `\\x1b${tcGroup[25]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 그림 제거\n        RS.MessageSystem.Reg[e][26] = new RegExp(\n            `(?:\\x1b${tcGroup[26]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 아이템\n        RS.MessageSystem.Reg[e][27] = new RegExp(\n            `(?:\\x1b${tcGroup[27]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 무기구\n        RS.MessageSystem.Reg[e][28] = new RegExp(\n            `(?:\\x1b${tcGroup[28]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 방어구\n        RS.MessageSystem.Reg[e][29] = new RegExp(\n            `(?:\\x1b${tcGroup[29]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 직업\n        RS.MessageSystem.Reg[e][30] = new RegExp(\n            `(?:\\x1b${tcGroup[30]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 적군\n        RS.MessageSystem.Reg[e][31] = new RegExp(\n            `(?:\\x1b${tcGroup[31]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 상태\n        RS.MessageSystem.Reg[e][32] = new RegExp(\n            `(?:\\x1b${tcGroup[32]})\\\\[(\\\\d+)\\\\]`,\n            \"g\"\n        ); // 스킬\n        RS.MessageSystem.Reg[e][33] = new RegExp(\n            `\\x1b${tcGroup[33]}\\\\<(.*)\\\\>`,\n            \"gi\"\n        ); // 얼굴\n        RS.MessageSystem.Reg[e][34] = new RegExp(\n            `(?:\\x1b${tcGroup[34]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 아군\n        RS.MessageSystem.Reg[e][35] = new RegExp(\n            `(?:\\x1b${tcGroup[35]})\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // 적군\n\n        RS.MessageSystem.Reg[e][36] = new RegExp(`\\x1b${tcGroup[36]}`, \"gi\"); // [.]\n        RS.MessageSystem.Reg[e][37] = new RegExp(`\\x1b${tcGroup[37]}`, \"gi\"); // [|]\n        RS.MessageSystem.Reg[e][38] = new RegExp(`\\x1b${tcGroup[38]}`, \"gi\"); // [!]\n        RS.MessageSystem.Reg[e][39] = new RegExp(`\\x1b${tcGroup[39]}`, \"gi\"); // [<]\n        RS.MessageSystem.Reg[e][40] = new RegExp(`\\x1b${tcGroup[40]}`, \"gi\"); // [>]\n        RS.MessageSystem.Reg[e][41] = new RegExp(`\\x1b${tcGroup[41]}`, \"gi\"); // [\\^]\n\n        RS.MessageSystem.Reg[e][42] = new RegExp(`\\x1b${tcGroup[42]}`, \"gi\"); // AS굵게!\n        RS.MessageSystem.Reg[e][43] = new RegExp(`\\x1b${tcGroup[43]}`, \"gi\"); // AE굵게!\n        RS.MessageSystem.Reg[e][44] = new RegExp(`\\x1b${tcGroup[44]}`, \"gi\"); // AS이탤릭!\n        RS.MessageSystem.Reg[e][45] = new RegExp(`\\x1b${tcGroup[45]}`, \"gi\"); // AE이탤릭!\n\n        RS.MessageSystem.Reg[e][46] = new RegExp(`(?:<${tcGroup[46]}>)`, \"gi\"); // LEFT\n        RS.MessageSystem.Reg[e][47] = new RegExp(`(?:<${tcGroup[47]}>)`, \"gi\"); // CENTER\n        RS.MessageSystem.Reg[e][48] = new RegExp(`(?:<${tcGroup[48]}>)`, \"gi\"); // RIGHT\n\n        RS.MessageSystem.Reg[e][49] = new RegExp(\n            `(?:<[${tcGroup[49]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][50] = new RegExp(\n            `(?:<\\/[${tcGroup[50]}]>)`,\n            \"gi\"\n        ); // B\n        RS.MessageSystem.Reg[e][51] = new RegExp(\n            `(?:<[${tcGroup[51]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][52] = new RegExp(\n            `(?:<\\/[${tcGroup[52]}]>)`,\n            \"gi\"\n        ); // I\n        RS.MessageSystem.Reg[e][53] = new RegExp(`\\x1b${tcGroup[53]}`, \"gi\"); // AEND : ALIGN_CLEAR\n        RS.MessageSystem.Reg[e][54] = new RegExp(\n            `\\x1b${tcGroup[54]}\\\\[(.*)\\\\]`,\n            \"gi\"\n        ); // \\배경색[색상] \\HC[색상]\n        RS.MessageSystem.Reg[e][55] = new RegExp(\n            `\\x1b${tcGroup[55]}\\\\[(\\\\d+)\\\\]`,\n            \"gi\"\n        ); // \\FD\n    });\n})();\n\nRS.MessageSystem.initSystem = function () {\n    var type = RS.MessageSystem.Params.langCode;\n    var ret = false;\n    if (type.match(/ko/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Korean;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.KoreanEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Korean;\n        ret = true;\n    }\n    if (type.match(/zh/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Chinese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.ChineseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Chinese;\n        ret = true;\n    }\n    if (type.match(/en/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n        ret = true;\n    }\n    if (type.match(/ja/)) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.Japanese;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.JapaneseEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.Japanese;\n        ret = true;\n    }\n    if (ret === false) {\n        RS.MessageSystem.Reg.Group = RS.MessageSystem.Reg.English;\n        RS.MessageSystem.Reg.defaultEscapeCode =\n            RS.MessageSystem.Reg.EnglishEscapeCode;\n        RS.MessageSystem.TextCodes.Main = RS.MessageSystem.TextCodes.English;\n    }\n};\n\n//=============================================================================\n// Color\n//=============================================================================\n\ninterface IColor {\n    getColor(c: number): string;\n    baseColor: string;\n    getBaseColor(): string;\n    getUserCustomColor(str: string): string;\n    gmColor(str: string): string;\n}\n\nexport const Color = <IColor>{};\n\nColor.getColor = function (n: number) {\n    var r = n & 255;\n    var g = (n >> 8) & 255;\n    var b = (n >> 16) & 255;\n    var result = `rgba(${r},${g},${b},1)`;\n    return result;\n};\n\nColor.baseColor = Color.getColor(16777215);\n\nColor.getBaseColor = function () {\n    return Color.baseColor;\n};\n\nColor.getUserCustomColor = function (str) {\n    \"use strict\";\n\n    var obj: any[] = RS.MessageSystem.Params.exTextColors;\n    var ret = str;\n\n    if (!(typeof obj[0] === \"object\")) return ret;\n    if (!obj[0].hasOwnProperty(\"Color Name\")) return ret;\n\n    obj.forEach((e: any, i: number, arr: any[]) => {\n        if (e[\"Color Name\"] === str) {\n            var r = parseInt(e[\"Red\"]) || 0;\n            var g = parseInt(e[\"Green\"]) || 0;\n            var b = parseInt(e[\"Blue\"]) || 0;\n            var a = parseFloat(e[\"Alpha\"]) || 1.0;\n\n            ret = `rgba(${r},${g},${b},${a})`;\n        }\n    });\n\n    return ret;\n};\n\nconst KOREAN_COLORS: Record<string, string> = {\n    청록: \"rgba(0,255,255,1)\",\n    청록색: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    검은색: \"rgba(0,0,0,1)\",\n    검정: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    파란색: \"rgba(0,0,255,1)\",\n    파랑: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    짙은회색: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    자홍색: \"rgba(255,0,255,1)\",\n    자홍: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    회색: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    녹색: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    밝은녹색: \"rgba(0,255,0,1)\",\n    라임: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    밝은회색: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    밤색: \"rgba(128,0,0,1)\",\n    마룬: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    감청색: \"rgba(0,0,128,1)\",\n    네이비: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    황록색: \"rgba(128,128,0,1)\",\n    올리브: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    주황색: \"rgba(255,160,64,1)\",\n    주황: \"rgba(255,160,64,1)\",\n    오렌지: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    보라색: \"rgba(128,0,128,1)\",\n    보라: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    빨간색: \"rgba(255,0,0,1)\",\n    빨강: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    은색: \"rgba(192,192,192,1)\",\n    은: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    민트색: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    흰색: \"rgba(255,255,255,1)\",\n    흰: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    노란색: \"rgba(255,255,0,1)\",\n    노랑: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst CHINESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    蓝色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    深灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫红色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    绿色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    浅绿色: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    浅灰色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    栗色: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    绀青色: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黄绿色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙黄色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    红色: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    银白色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    水鸭色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黄色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst ENGLISH_COLOR: Record<string, string> = {\n    AQUA: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    BLACK: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    BLUE: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    DKGRAY: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    FUCHSIA: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    GRAY: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    GREEN: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    LIME: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    LTGRAY: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    MAROON: \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    NAVY: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    OLIVE: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    ORANGE: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    PURPLE: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    RED: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    SILVER: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    TEAL: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    WHITE: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    YELLOW: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nconst JAPANESE_COLOR: Record<string, string> = {\n    水色: \"rgba(0,255,255,1)\",\n    アクア色: \"rgba(0,255,255,1)\",\n    c_aqua: \"rgba(0,255,255,1)\",\n    黑色: \"rgba(0,0,0,1)\",\n    c_black: \"rgba(0,0,0,1)\",\n    靑色: \"rgba(0,0,255,1)\",\n    c_blue: \"rgba(0,0,255,1)\",\n    ふか灰色: \"rgba(64,64,64,1)\",\n    c_dkgray: \"rgba(64,64,64,1)\",\n    紫紅色: \"rgba(255,0,255,1)\",\n    c_fuchsia: \"rgba(255,0,255,1)\",\n    灰色: \"rgba(128,128,128,1)\",\n    c_gray: \"rgba(128,128,128,1)\",\n    綠色: \"rgba(0,128,0,1)\",\n    c_green: \"rgba(0,128,0,1)\",\n    黃綠: \"rgba(0,255,0,1)\",\n    c_lime: \"rgba(0,255,0,1)\",\n    鼠色: \"rgba(192,192,192,1)\",\n    c_ltgray: \"rgba(192,192,192,1)\",\n    \"―色\": \"rgba(128,0,0,1)\",\n    c_maroon: \"rgba(128,0,0,1)\",\n    群青色: \"rgba(0,0,128,1)\",\n    ネイビー: \"rgba(0,0,128,1)\",\n    c_navy: \"rgba(0,0,128,1)\",\n    黃綠色: \"rgba(128,128,0,1)\",\n    オリーブ色: \"rgba(128,128,0,1)\",\n    c_olive: \"rgba(128,128,0,1)\",\n    橙色: \"rgba(255,160,64,1)\",\n    オレンジ色: \"rgba(255,160,64,1)\",\n    c_orange: \"rgba(255,160,64,1)\",\n    紫色: \"rgba(128,0,128,1)\",\n    c_purple: \"rgba(128,0,128,1)\",\n    赤色: \"rgba(255,0,0,1)\",\n    レッド: \"rgba(255,0,0,1)\",\n    c_red: \"rgba(255,0,0,1)\",\n    銀色: \"rgba(192,192,192,1)\",\n    c_silver: \"rgba(192,192,192,1)\",\n    ミント色: \"rgba(0,128,128,1)\",\n    薄荷色: \"rgba(0,128,128,1)\",\n    c_teal: \"rgba(0,128,128,1)\",\n    白色: \"rgba(255,255,255,1)\",\n    c_white: \"rgba(255,255,255,1)\",\n    黃色: \"rgba(255,255,0,1)\",\n    c_yellow: \"rgba(255,255,0,1)\",\n};\n\nRS.MessageSystem.getKoreanColor = function (str: string) {\n    let color = KOREAN_COLORS[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"기본\", \"기본색\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getChineseColor = function (str: string) {\n    let color = CHINESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"通常\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getEnglishColor = function (str: string) {\n    let color = ENGLISH_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if (\"c_normal\" === str) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getJapaneseColor = function (str: string) {\n    let color = JAPANESE_COLOR[str];\n\n    if (color) {\n        return color;\n    }\n\n    if ([\"基本色\", \"c_normal\"].contains(str)) {\n        return Color.getBaseColor();\n    }\n\n    return Color.getUserCustomColor(str);\n};\n\nRS.MessageSystem.getBrowser = function () {\n    /* Refer to https://stackoverflow.com/a/16938481 */\n    var ua = navigator.userAgent,\n        tem,\n        M =\n            ua.match(\n                /(opera|chrome|edge|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\n            ) || [];\n\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n\n        return {\n            name: \"IE\",\n            version: tem[1] || \"\",\n        };\n    }\n\n    if (M[1] === \"Chrome\") {\n        tem = ua.match(/\\bOPR\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Opera\",\n                version: tem[1],\n            };\n        }\n\n        tem = ua.match(/\\bEdge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: \"Edge\",\n                version: tem[1],\n            };\n        }\n    }\n\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\n\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n\n    return {\n        name: M[0],\n        version: M[1],\n    };\n};\n\nColor.gmColor = function (str: string) {\n    const type = <string>RS.MessageSystem.Params.langCode;\n    if (type.match(/ko/)) {\n        return RS.MessageSystem.getKoreanColor(str);\n    }\n    if (type.match(/zh/)) {\n        return RS.MessageSystem.getChineseColor(str);\n    }\n    if (type.match(/en/)) {\n        return RS.MessageSystem.getEnglishColor(str);\n    }\n    if (type.match(/ja/)) {\n        return RS.MessageSystem.getJapaneseColor(str);\n    }\n    return RS.MessageSystem.getEnglishColor(str);\n};\n\nwindow.RS = RS;\n","import { Rectangle } from \"pixi.js\";\nimport { BalloonWindowTransformComponent } from \"./BalloonWindowTransformComponent\";\nimport { BaseComponent } from \"./BaseComponent\";\nimport { Component } from \"./Component\";\nimport { NameWindowPositionComponent } from \"./NameWindowPositionComponent\";\n\ntype BaseComponentName =\n    | \"NameWindowPositionComponent\"\n    | \"BalloonWindowTransformComponent\";\n\ninterface Class<T> {\n    new (...args: any[]): T;\n}\n\n/**\n *\n */\n// type InjectFunctionWithInfer = <\n//     R = InstanceType<new (rect: Rectangle) => Window_Message>\n// >(\n//     messageWindow: R\n// ) => InstanceType<new (messageWindow: R) => Component>;\ntype InjectFunctionWithInfer = <\n    R = InstanceType<new (rect: Rectangle) => Window_Message>\n>(\n    messageWindow: R\n) => BaseComponent;\n\n/**\n * @function getComponentValue\n * @param item\n * @param key\n * @returns\n */\nfunction getComponentValue<T, K extends keyof T>(item: T, key: K): T[K] {\n    return item[key];\n}\n\n/**\n * @static\n * @class DependencyInjector\n * @description\n * 이 클래스는 MZ에서 MV에 의존성을 갖는 메소드를 실행하는데 필요한 컴포넌트를 주입합니다.\n * 또한 해당 컴포넌트를 안전한 샌드박스 환경에서 실행시키기 위해 사용됩니다.\n * 샌드박스 환경이라함은 MZ에서도 오류 없이 안전하게 동작한다는 것을 의미합니다.\n */\nexport class DependencyInjector {\n    public static COMPONENTS?: [\n        BalloonWindowTransformComponent,\n        NameWindowPositionComponent\n    ];\n\n    public static _components: { [key: string]: Component } = {};\n    private static _isDirty: Boolean = false;\n\n    private static _messageWindow?: Window_Message | undefined;\n\n    public static injectMessageWindow(messageWindow: Window_Message) {\n        // 주입할 메시지 윈도우 클래스의 인스턴스를 가져옵니다.\n        DependencyInjector._messageWindow = messageWindow;\n        DependencyInjector.inject(messageWindow);\n    }\n\n    public static ejectMessageWindow() {\n        if (DependencyInjector._isDirty) {\n            DependencyInjector._messageWindow = undefined;\n            DependencyInjector.COMPONENTS = undefined;\n            DependencyInjector._isDirty = false;\n        }\n    }\n\n    /**\n     * inject all components inside the sandbox environment.\n     *\n     * @param messageWindow Specify the message window.\n     * @returns void\n     */\n    private static inject(messageWindow: Window_Message): void {\n        if (DependencyInjector._isDirty) {\n            console.log(\"components are already injected\");\n            return;\n        }\n\n        // 컴포넌트에 메시지 윈도우를 주입합니다.\n        DependencyInjector.COMPONENTS = [\n            new BalloonWindowTransformComponent({ messageWindow }),\n            new NameWindowPositionComponent({ messageWindow }),\n        ];\n\n        DependencyInjector._isDirty = true;\n    }\n\n    /**\n     * get the component by name.\n     *\n     * @param name Specify the component name\n     * @returns Component\n     */\n    public static getComponent<R extends BaseComponentName>(\n        name: R\n    ):\n        | BalloonWindowTransformComponent\n        | NameWindowPositionComponent\n        | undefined {\n        const items = DependencyInjector.COMPONENTS!.filter((e) => {\n            return e instanceof DependencyInjector.getComponentClass(name);\n        });\n\n        return items.pop();\n    }\n\n    static getComponentClass(name: BaseComponentName): typeof BaseComponent {\n        switch (name) {\n            case \"BalloonWindowTransformComponent\":\n                return BalloonWindowTransformComponent;\n            case \"NameWindowPositionComponent\":\n                return NameWindowPositionComponent;\n            default:\n                return BaseComponent;\n        }\n    }\n\n    public static ready() {\n        if (DependencyInjector.COMPONENTS) {\n            DependencyInjector.COMPONENTS.forEach((component) => {\n                component.ready();\n            });\n        }\n    }\n}\n","import { BaseComponent } from \"./BaseComponent\";\nimport { ComponentProp } from \"./Component\";\n\nexport type BalloonRectData = {\n    /**\n     *\n     */\n    mx: number;\n    /**\n     *\n     */\n    my: number;\n    /**\n     *\n     */\n    tx: number;\n    /**\n     *\n     */\n    ty: number;\n    /**\n     *\n     */\n    tileHeight: number;\n    /**\n     * Sets or gets `dx` that means the destination x coordinate.\n     */\n    dx: number;\n    /**\n     * Sets or gets `dy` that means the destination y coordinate.\n     */\n    dy: number;\n    /**\n     * Gets or sets the value related for the name window.\n     */\n    ny: number;\n    /**\n     *\n     */\n    scaleY: number;\n    /**\n     * Gets or sets the padding value (like value named `padding-bottom`)\n     * `screenX`와 `screenY`는 `right-bottom`에 위치하므로 `height` 만큼 빼야 합니다.\n     */\n    padY: number;\n};\n\n/**\n * @class BalloonWindowTransformComponent\n * @description\n * 말풍선 윈도우의 위치를 조정하기 위한 컴포넌트입니다.\n */\nexport class BalloonWindowTransformComponent extends BaseComponent {\n    private _bWidth: number = 0;\n    private _bHeight: number = 0;\n    public transform!: PIXI.Transform;\n\n    onReady(props: ComponentProp) {\n        super.onReady(props);\n        this._bWidth = this.width;\n        this._bHeight = this.height;\n    }\n\n    /**\n     * 말풍선 영역의 크기를 계산합니다.\n     *\n     * @param {String} text\n     * @returns {Number}\n     */\n    calcBalloonRect(text: string) {\n        // {\n        //     let temp: string,\n        //         baseWidth: number,\n        //         tempText: string[],\n        //         height: number,\n        //         min: number,\n        //         pad: number,\n        //         numOfLines: number;\n        //     // drawTextEx를 사용하기 전에 현재 상태를 저장한다.\n        //     this.save();\n\n        //     temp = text;\n\n        //     // 라인 갯수를 구하기 위해 텍스트를 줄바꿈 문자를 기준으로 나눈다.\n        //     const copyText = text.slice(0);\n        //     tempText = copyText.split(/[\\r\\n]+/);\n        //     numOfLines = tempText.length;\n\n        //     pad = this.standardPadding() * 2;\n\n        //     // 높이를 구한다.\n        //     height = 0;\n        //     tempText.forEach((i) => (height += this.calcBalloonRectHeight(i)));\n\n        //     if (height <= 0) {\n        //         // 높이를 구할 수 없었다면,\n        //         height = this.fittingHeight(numOfLines);\n        //     } else {\n        //         // 높이를 구했다면\n        //         height = height + pad;\n        //     }\n\n        //     const textPadding = this.textPadding();\n\n        //     // 폭을 계산한다.\n        //     let pw = 0;\n        //     for (var i = 0; i < numOfLines; i++) {\n        //         this._isUsedTextWidthEx = true;\n        //         const x = this.drawTextEx(tempText[i]);\n        //         this._isUsedTextWidthEx = false;\n        //         if (x >= pw) {\n        //             pw = x;\n        //         }\n        //     }\n\n        //     baseWidth = pw;\n        //     this._bWidth =\n        //         baseWidth + pad + textPadding || RS.MessageSystem.Params.WIDTH;\n\n        //     // 얼굴 이미지가 설정되어있다면 ?\n        //     if ($gameMessage.faceName() !== \"\") {\n        //         // 최소 높이를 설정한다.\n        //         min = this.fittingHeight(4);\n        //         // 기존 폭 값에 얼굴 이미지의 폭을 더한다.\n        //         this._bWidth += this.newLineX() + pad;\n        //         if (RS.MessageSystem.Params.faceDirection === 2) {\n        //             this._bWidth += ImageManager.faceWidth;\n        //         }\n        //         // 높이 값이 최소 높이보다 작으면, 최소 높이 값으로 설정한다.\n        //         if (height < min)\n        //             height = height.clamp(min, height + (min - height));\n        //     }\n\n        //     const type = RS.MessageSystem.Params.choiceWindowStyle;\n\n        //     // 선택지가 있고, XP 스타일로 설정했을 때\n        //     if (type === \"RMXP\" && $gameMessage.isChoice()) {\n        //         const maxLines = tempText.length;\n        //         const maxChoices = $gameMessage.choices().length;\n        //         const lineHeight = this.lineHeight();\n        //         // 선택지 갯수를 확장했을 수도 있지만, 4개로 가정한다.\n        //         height = height + maxChoices * lineHeight;\n        //         // 선택지 윈도우의 폭이 말풍선보다 크면 제한을 둔다.\n        //         if (this._choiceWindow.windowWidth() > this._bWidth) {\n        //             this._bWidth = this._choiceWindow.windowWidth();\n        //         }\n        //     }\n\n        //     this.restore();\n        // }\n        this.save();\n\n        {\n            // TODO: 얼굴 이미지 설정 체크\n            // TODO: 인라인 선택지 모드인지 체크\n\n            const rect = this.textSizeEx(text);\n            const padding = this.standardPadding();\n            this._bWidth = rect.width + padding * 2;\n            this._bHeight = Math.max(\n                rect.height + padding * 2,\n                this.fittingHeight(1)\n            );\n            // this.drawTextEx() 사용하기 이전 상태로 복구한다.\n        }\n        this.restore();\n    }\n\n    textSizeEx(text: string): TextSizeRect {\n        this.messageWindow._isUsedTextWidthEx = true;\n        const rect = this.messageWindow.textSizeEx(text);\n        this.messageWindow._isUsedTextWidthEx = false;\n\n        return rect;\n    }\n\n    /**\n     * @override\n     */\n    updatePlacement() {\n        this.messageWindow.updatePlacement();\n    }\n\n    isActiveInBalloon() {\n        const isInValidBalloon = $gameMessage.getBalloon() === -2;\n        if (isInValidBalloon) {\n            this.updatePlacement();\n            return false;\n        }\n        return true;\n    }\n\n    setBalloonRect(data: BalloonRectData) {\n        const faceName = $gameMessage.faceName();\n        const faceDirection = RS.MessageSystem.Params.faceDirection;\n\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        this.x = data.dx + ox;\n        this.y = data.dy + oy;\n        this.width = this._bWidth;\n        this.height = this._bHeight;\n\n        if (faceName && faceDirection === 2) {\n            this.drawMessageFace();\n        }\n    }\n\n    setBalloonPlacement(data: BalloonRectData): BalloonRectData | void {\n        const gw = Graphics.width;\n        const gh = Graphics.height;\n        const bw = Graphics.boxWidth;\n        const bh = Graphics.boxHeight;\n\n        console.log(\"setBalloonPlacement() + \" + JSON.stringify(data));\n        // 화면 좌측\n        if (!data) return;\n        if (data.mx - this._bWidth / 2 < 0) {\n            data.dx = 0;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 우측\n        if (data.mx - this._bWidth / 2 > bw - this._bWidth) {\n            data.dx = bw - this._bWidth;\n            data.tx = this.canvasToLocalX(data.mx);\n        }\n\n        // 화면 상단\n        if (data.my - this._bHeight - data.tileHeight / 2 < 0) {\n            data.dy = data.my + data.tileHeight / 2;\n            data.scaleY = -1;\n            data.ty = this._height * data.scaleY + this._height;\n            data.ny =\n                this.y + this._bHeight + RS.MessageSystem.Params.nameWindowY;\n        }\n\n        // 화면 하단\n        if (data.my - this._bHeight > bh - this._bHeight) {\n            data.dy = bh - this._bHeight;\n            data.ty = this._height;\n        }\n\n        return data;\n    }\n\n    /**\n     * Updates position of the pause sprite and the name window.\n     *\n     * @param data\n     */\n    updateSubBalloonElements(data: BalloonRectData) {\n        const _pauseSignSprite = this.messageWindow._pauseSignSprite;\n        if (_pauseSignSprite) {\n            _pauseSignSprite.move(data.tx, data.ty);\n            _pauseSignSprite.scale.y = data.scaleY;\n        }\n        this._nameWindow.y = data.ny;\n    }\n\n    getNameWindowY(): number {\n        const ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        return ny ? ny : 0;\n    }\n\n    // canvasToLocalX(x: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         x -= node.x;\n    //         node = <Sprite>node.parent;\n    //     }\n    //     return x;\n    // }\n\n    // canvasToLocalY(y: number) {\n    //     let node: any = this.messageWindow;\n    //     while (node) {\n    //         y -= node.y;\n    //         node = node.parent;\n    //     }\n    //     return y;\n    // }\n\n    updateBalloonPosition(): never | void {\n        console.log(\n            \"============ DEBUG updateBalloonPosition() ====================\"\n        );\n\n        let data = <BalloonRectData>{};\n\n        if (!this.isActiveInBalloon()) return;\n\n        // 말풍선 소유자의 화면 좌표\n        const owner = <Game_Character>$gameMap.getMsgOwner();\n\n        if (!owner) {\n            console.warn($gameMap.getMsgOwner());\n            throw new Error(\"말풍선 소유자가 없습니다.\");\n        }\n\n        data.mx = owner.screenX();\n        data.my = owner.screenY();\n\n        console.log(\"%d %d\", data.mx, data.my);\n\n        data.tx = this._bWidth / 2;\n        data.ty = this._bHeight;\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight;\n        data.ny = this.getNameWindowY();\n\n        console.log(JSON.stringify(data));\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        if (\n            data.dx + RS.MessageSystem.Params.windowOffset.x !== this.x ||\n            data.dy + RS.MessageSystem.Params.windowOffset.y !== this.y ||\n            this._bWidth !== this.width ||\n            this._bHeight !== this.height\n        ) {\n            // 말풍선 위치 및 크기 설정\n            this.setBalloonRect(data);\n\n            // 멈춤 표시 스프라이트 위치 조정\n            this.updateSubBalloonElements(data);\n        }\n    }\n\n    updateBalloonPositionInBattle() {\n        if (!$gameParty.inBattle()) {\n            // 전투 씬인지 확인\n            console.warn(\"전투가 아닙니다\");\n            return;\n        }\n        if (!$gameSystem.isSideView()) {\n            // 사이드뷰 전투인지 확인\n            console.warn(\"사이드뷰 전투가 아닙니다.\");\n            return;\n        }\n\n        let data = <BalloonRectData>{};\n\n        // 타겟의 화면 좌표 설정\n        let owner = $gameMap.getMsgOwner();\n        if (!owner) {\n            console.warn(\"owner 변수가 없습니다\");\n            return;\n        }\n        if (!owner.hasOwnProperty(\"type\")) {\n            console.warn(\"type 속성이 없습니다 : \" + owner);\n            return;\n        }\n        if (!owner.hasOwnProperty(\"id\")) {\n            console.warn(\"id 속성이 없습니다 : \" + owner);\n            return;\n        }\n\n        // 현재 씬이 전투 씬이 아닌 경우를 확인한다.\n        let scene = SceneManager._scene;\n        if (!(scene instanceof Scene_Battle)) {\n            console.warn(\"전투 장면이 아닙니다\");\n            return false;\n        }\n\n        let parent;\n\n        // 액터인가?\n        if (owner.type === \"actor\") {\n            parent = scene._spriteset._actorSprites; // 액터 스프라이트 군을 반환\n        } else {\n            parent = scene._spriteset._enemySprites; // 적 스프라이트 군을 반환\n        }\n\n        // 타겟 스프라이트를 id 값으로 찾는다.\n        let tempBattlers = [];\n        tempBattlers = parent;\n        let target = tempBattlers[owner.id];\n        if (!target) {\n            console.warn(\"타겟이 없습니다\");\n            return;\n        }\n\n        // 이미 죽어있다면 메시지를 일반 메시지로 표시한다.\n        if (\n            (owner.type === \"actor\" &&\n                !(<Sprite_Actor>target)._actor.isAlive()) ||\n            (owner.type === \"enemy\" && !(<Sprite_Enemy>target)._enemy.isAlive())\n        ) {\n            return;\n        }\n\n        data.mx = target.x;\n        data.my = target.y;\n\n        data.padY =\n            owner.type === \"actor\"\n                ? (target as Sprite_Actor)._mainSprite.bitmap.height / 6\n                : target.bitmap.height;\n\n        data.tx = this._width / 2;\n        data.ty = this._height;\n\n        data.scaleY = 1;\n        data.tileHeight = $gameMessage.getBalloonPatternHeight();\n\n        data.dx = data.mx - this._bWidth / 2;\n        data.dy = data.my - this._bHeight - data.tileHeight - data.padY;\n\n        data.ny =\n            this.y -\n            this._nameWindow.height -\n            RS.MessageSystem.Params.nameWindowY;\n\n        data = <BalloonRectData>this.setBalloonPlacement(data);\n\n        // 말풍선 위치 및 크기 설정\n        this.setBalloonRect(data);\n\n        // 멈춤 표시 스프라이트 위치 조정\n        this.updateSubBalloonElements(data);\n\n        if (this.transform) this.updateTransform();\n    }\n\n    updateTransform(): void {\n        this.messageWindow.updateTransform();\n    }\n\n    calcBalloonRectHeight(text: string) {\n        // 상태 저장\n        this.save();\n\n        const messageWindow = this.messageWindow;\n        const tempFontSize = this.contents.fontSize;\n\n        const textState = messageWindow.createTextState(text, 0, 0, 0);\n        textState.text = messageWindow.convertEscapeCharacters(text);\n        textState.height = messageWindow.calcTextHeight(textState, false);\n\n        // 상태 복구\n        this.restore();\n\n        messageWindow.setTextSize(tempFontSize);\n        return textState.height;\n    }\n}\n","import { EventEmitter } from \"./EventEmitter\";\n\nexport type ComponentProp = {\n  messageWindow: Window_Message;\n  [key: string]: any;\n};\n\n/**\n * @class Component\n * @description\n * 컴포넌트를 구현하기 위한 클래스입니다.\n */\nexport class Component extends EventEmitter {\n  public name?: string;\n  private props?: ComponentProp;\n\n  constructor(props: ComponentProp) {\n    super();\n    this.init(props);\n  }\n\n  init(props: ComponentProp) {\n    this.props = props;\n\n    this.on(\"ready\", (props: ComponentProp) => this.onReady(props));\n    this.on(\"mounted\", (props: ComponentProp) => this.mounted(props));\n    this.on(\"destroy\", (props: ComponentProp) => this.onDestroy());\n  }\n\n  ready() {\n    this.emit(\"ready\", this.props);\n  }\n\n  destroy() {\n    this.emit(\"destroy\", this.props);\n  }\n\n  execute() {\n    this.emit(\"mounted\", this.props);\n  }\n\n  onReady(props: ComponentProp) {}\n  onDestroy() {}\n  mounted(props: ComponentProp) {}\n}\n","// 함수 타입\ntype FunctionLike = Function;\n// 이벤트 키 타입\ntype EventKey = string;\n\n/**\n * 이벤트 리스터를 정의합니다.\n */\ntype VMEventListener = { [key: EventKey]: Function[] };\ntype EventNames = \"ready\" | \"mounted\" | \"destroy\";\n\n/**\n * @class EventEmitter\n * @description\n * 이벤트를 전달하기 위한 클래스입니다.\n */\nexport class EventEmitter {\n  constructor(private _listeners: VMEventListener = {}) {\n    this._listeners = {};\n  }\n\n  /**\n   * 호출할 이벤트를 등록합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param func\n   * @returns\n   */\n  on(eventName: EventNames, func: FunctionLike) {\n    if (!this._listeners[eventName]) {\n      this._listeners[eventName] = [];\n    }\n\n    if (!func) {\n      return;\n    }\n\n    if (func instanceof Function) {\n      this._listeners[eventName].push(func);\n    }\n  }\n\n  /**\n   * 등록된 이벤트를 호출합니다.\n   *\n   * @param eventName 호출할 이벤트 명\n   * @param args\n   * @returns\n   */\n  emit(eventName: EventNames, ...args: any[]) {\n    if (!this._listeners[eventName]) {\n      return;\n    }\n\n    this._listeners[eventName].forEach((func) => {\n      if (!(func instanceof Function)) {\n        console.warn(\"호출된 이벤트 리스너가 함수가 아닙니다.\");\n        return;\n      }\n\n      func(...args);\n    });\n  }\n}\n","import { BaseComponent } from \"./BaseComponent\";\n\n/**\n * @class NamwWindowPositionComponent\n * @description\n * 이름 윈도우의 X좌표를 재설정합니다.\n */\nexport class NameWindowPositionComponent extends BaseComponent {\n    setOpacity(value: number) {\n        let opacity = value;\n        if (typeof opacity !== \"number\") {\n            opacity = Number(opacity);\n        }\n        if (isNaN(opacity)) {\n            opacity = 255;\n        }\n        this._nameWindow.opacity = value;\n    }\n\n    updatePositionX() {\n        // 이름 윈도우가 없다면\n        if (!this._nameWindow) {\n            return;\n        }\n\n        const mx = this.x;\n        const w = this.width;\n        const nw = this._nameWindow.width;\n\n        const position = <NameWindowPositon>(\n            RS.MessageSystem.Params.namePositionTypeAtX\n        );\n\n        const nx = RS.MessageSystem.Params.nameWindowX;\n\n        let newX = mx + nx;\n\n        switch (position) {\n            case \"right\":\n                newX = mx + w - nw - nx;\n                break;\n            case \"center\":\n                newX = mx + w / 2 - nw / 2 - nx;\n                break;\n            case \"left\":\n                newX = mx + nx;\n                break;\n            case \"opacity0\":\n                this.setOpacity(0);\n                break;\n            case \"defaultOpacity\":\n                this.setOpacity(RS.MessageSystem.Params.defaultOpacity);\n                break;\n            case \"auto\":\n                newX = this.x + this.newLineX() + nx;\n                break;\n        }\n\n        this._nameWindow.x = newX;\n    }\n\n    updatePositionY() {\n        const ox = RS.MessageSystem.Params.windowOffset.x;\n        const oy = RS.MessageSystem.Params.windowOffset.y;\n        const positionType = $gameMessage.positionType();\n        const ballonOwnerType = $gameMessage.getBalloon();\n\n        this.updatePositionX();\n\n        // 메시지 윈도우가 상단이고, 말풍선 모드가 아니라면\n        if (positionType === 0 && ballonOwnerType === -2) {\n            // 최상단의 위치\n            const topY = 0;\n\n            this._nameWindow.y = topY + oy;\n\n            // 이름 윈도우가 열렸는 지 여부에 따라 메시지 윈도우의 Y 좌표를 설정합니다.\n            this.y = this._nameWindow.isOpen()\n                ? topY +\n                  this._nameWindow.height +\n                  RS.MessageSystem.Params.nameWindowY +\n                  oy\n                : topY + oy;\n        } else {\n            this._nameWindow.y =\n                this.y -\n                this._nameWindow.height -\n                RS.MessageSystem.Params.nameWindowY;\n        }\n    }\n}\n","interface DataLinkSet {\n    callbackFunction: Function;\n    active: boolean;\n}\n\n/**\n * @class ComponentExecutor\n * @author biud436\n * @description\n * ComponentExecutor는 컴포넌트를 샌드박스 환경에서 안전하게 실행합니다.\n * 샌드박스 환경이라는 것은 주요 메서드가 외부와 차단되어, 예외 처리를 통하여 각종 오류를 캐치할 수 있게 합니다.\n */\nexport default class ComponentExecutor {\n    public static INSTANCE: ComponentExecutor;\n    private _components: Record<string, DataLinkSet> = {};\n\n    public static getInstance(): ComponentExecutor {\n        if (!ComponentExecutor.INSTANCE) {\n            ComponentExecutor.INSTANCE = new ComponentExecutor();\n        }\n        return ComponentExecutor.INSTANCE;\n    }\n\n    public constructor() {}\n\n    public add(name: string, func: Function): ComponentExecutor {\n        if (name === \"\") {\n            let startChar = 97; // a\n            let endChar = 122; // z\n            let len = 7; // length of random string\n\n            for (let i = 0; i < len; i++) {\n                name += String.fromCharCode(\n                    Math.floor(Math.random() * (endChar - startChar)) +\n                        startChar\n                );\n            }\n        }\n\n        this._components[name] = <DataLinkSet>{\n            callbackFunction: func,\n            active: false,\n        };\n\n        return this;\n    }\n\n    public wrap(name: string, func: Function): ComponentExecutor {\n        return this.add(name, func);\n    }\n\n    public get(name: string): Function {\n        const prop = this._components[name];\n\n        return prop.callbackFunction;\n    }\n\n    public active(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = true;\n\n        return this;\n    }\n\n    public deactive(name: string): ComponentExecutor {\n        const prop = this._components[name];\n\n        prop.active = false;\n\n        return this;\n    }\n\n    public ready(name: string): ComponentExecutor {\n        return this.active(name);\n    }\n\n    public executeAll() {\n        try {\n            for (const key in this._components) {\n                const prop = this._components[key];\n\n                if (prop.active) {\n                    const currentCallback = this.get(key);\n\n                    if (currentCallback instanceof Function) {\n                        currentCallback();\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n"],"sourceRoot":""}